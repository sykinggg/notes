(window.webpackJsonp=window.webpackJsonp||[]).push([[555],{828:function(v,t,_){"use strict";_.r(t);var a=_(1),s=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"第13天-说说你对javascript的作用域的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第13天-说说你对javascript的作用域的理解"}},[v._v("#")]),v._v(" 第13天 说说你对javascript的作用域的理解")]),v._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("h3",{attrs:{id:"全局作用域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域"}},[v._v("#")]),v._v(" 全局作用域")]),v._v(" "),_("p",[v._v("这个没啥说的，就是在顶层环境中申明的变量都是全局作用域，他们的属性其实都在window对象下面。")]),v._v(" "),_("h3",{attrs:{id:"函数作用域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域"}},[v._v("#")]),v._v(" 函数作用域")]),v._v(" "),_("p",[v._v("在函数内部定义的变量都是函数作用域，只能在函数中访问到，当然也可以通过闭包来访问。除此之外，在其他地方是没法访问函数内部的变量的。")]),v._v(" "),_("h3",{attrs:{id:"局部作用域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#局部作用域"}},[v._v("#")]),v._v(" 局部作用域")]),v._v(" "),_("p",[_("code",[v._v("es6")]),v._v("中新增的特性，弥补了以前只能使用匿名及时运行函数来创建局部变量的缺陷。使用很简单，直接用"),_("code",[v._v("let")]),v._v("来申明变量就行。也可以使用"),_("code",[v._v("const")]),v._v("来申明变量，表明这是常数。")]),v._v(" "),_("h3",{attrs:{id:"作用域链"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[v._v("#")]),v._v(" 作用域链")]),v._v(" "),_("p",[v._v("要说清这个，需要首先明白"),_("code",[v._v("javascript")]),v._v("的代码运行过程。假设现在有个函数"),_("code",[v._v("funcA")]),v._v("，在该函数内部申明了一个局部变量a，在函数内部又定义了一个函数"),_("code",[v._v("funcB")]),v._v("，在函数B中申明了变量b。如下：")]),v._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("funcA")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" a"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("funcB")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" b"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),_("p",[v._v("当进入"),_("code",[v._v("funcA")]),v._v("时，这时候会把变量"),_("code",[v._v("a")]),v._v("压入当前的作用域"),_("code",[v._v("A")]),v._v("中，并且将作用域"),_("code",[v._v("A")]),v._v("入栈，当进入"),_("code",[v._v("funcB")]),v._v("时，则会把变量"),_("code",[v._v("b")]),v._v("压入当前的作用域"),_("code",[v._v("B")]),v._v("中，并且将作用域"),_("code",[v._v("B")]),v._v("入栈，那么这时候栈中就有了作用域"),_("code",[v._v("A")]),v._v("和作用域"),_("code",[v._v("B")]),v._v("，当在"),_("code",[v._v("funcB")]),v._v("中查找某个变量时，会先从当前的作用域"),_("code",[v._v("B")]),v._v("中查找，如果没有的话，那么就根据栈中的作用域依次往上查找，这就是作用域链。")]),v._v(" "),_("h2",{attrs:{id:"补充"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[v._v("#")]),v._v(" 补充")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("js是使用的词法作用域，所以当代码被加载时作用域已经被限定。")])]),v._v(" "),_("li",[_("p",[v._v("作用域只会引用当前作用域用到的 上层作用域的变量 其他没用到的将会随该函数一起推出调用栈")])])]),v._v(" "),_("h2",{attrs:{id:"另一种说法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#另一种说法"}},[v._v("#")]),v._v(" 另一种说法")]),v._v(" "),_("h3",{attrs:{id:"作用域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[v._v("#")]),v._v(" 作用域")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("作用域是一组规则，决定了一个变量（标识符）在哪里和如何被查找。")])]),v._v(" "),_("li",[_("p",[v._v("查找变量用于赋值，变量是一个 "),_("code",[v._v("LHS")]),v._v("（左手边）引用；查找变量用于取值，变量是一个 "),_("code",[v._v("RHS")]),v._v("（右手边）引用。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("LHS")]),v._v(" 和 "),_("code",[v._v("RHS")]),v._v(" 引用查询都从当前执行中的作用域开始，它们会在嵌套的作用域中一路向上，一次一个作用域（层）地查找这个标识符，直到它们到达全局作用域（顶层）并停止，既可能找到也可能没找到。")])]),v._v(" "),_("li",[_("p",[v._v("未找到的 "),_("code",[v._v("RHS")]),v._v(" 引用会导致 "),_("code",[v._v("ReferenceError")]),v._v(" 被抛出。")])]),v._v(" "),_("li",[_("p",[v._v("未找到的 "),_("code",[v._v("LHS")]),v._v(" 引用会导致一个自动的，隐含地创建的同名全局变量（如果不是“Strict模式”），或者一个 "),_("code",[v._v("ReferenceError")]),v._v("（“Strict模式”）。")])])]),v._v(" "),_("h3",{attrs:{id:"词法作用域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域"}},[v._v("#")]),v._v(" 词法作用域")]),v._v(" "),_("p",[v._v("js采用词法作用域，意味着作用域是由编写时函数被声明的位置决定。编译器的词法分析阶段实质上可以知道所有的标识符是在哪里和如何声明的，并在执行期间预测它们将如何被查询。（例外是"),_("code",[v._v("eval()")]),v._v(","),_("code",[v._v("with")]),v._v("，不推荐使用）")]),v._v(" "),_("h3",{attrs:{id:"函数作用域和块作用域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域和块作用域"}},[v._v("#")]),v._v(" 函数作用域和块作用域")]),v._v(" "),_("p",[v._v("在 "),_("code",[v._v("JavaScript")]),v._v(" 中函数是最常见的作用域单位。在另一个函数内部声明的变量和函数，实质上对任何外围“作用域”都是“隐藏的”，这是优秀软件的一个有意的设计原则。")]),v._v(" "),_("p",[v._v("但是函数绝不是唯一的作用域单位。块儿作用域指的是这样一种想法：变量和函数可以属于任意代码块（一般来说，就是任意的 { .. }。")]),v._v(" "),_("p",[v._v("从 "),_("code",[v._v("ES3")]),v._v(" 开始，"),_("code",[v._v("try")]),v._v("/"),_("code",[v._v("catch")]),v._v(" 结构在 "),_("code",[v._v("catch")]),v._v(" 子句上拥有块儿作用域。")]),v._v(" "),_("p",[v._v("在 "),_("code",[v._v("ES6")]),v._v(" 中，引入了 "),_("code",[v._v("let")]),v._v(" 关键字（"),_("code",[v._v("var")]),v._v(" 关键字的表兄弟）允许在任意代码块中声明变量。"),_("code",[v._v("if (..) { let a = 2; }")]),v._v(" 将会声明变量 "),_("code",[v._v("a")]),v._v("，而它实质上劫持了 "),_("code",[v._v("if")]),v._v(" 的 "),_("code",[v._v("{ .. }")]),v._v(" 块儿的作用域，并将自己附着在这里。")])])}),[],!1,null,null,null);t.default=s.exports}}]);