(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{901:function(t,a,s){"use strict";s.r(a);var e=s(1),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react-运行时优化方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-运行时优化方案"}},[t._v("#")]),t._v(" React 运行时优化方案")]),t._v(" "),s("h2",{attrs:{id:"几大-js-框架的设计思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#几大-js-框架的设计思路"}},[t._v("#")]),t._v(" 几大 JS 框架的设计思路")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/ab64f152daea4ac7b135f65cb1ed180e_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("首先，是 "),s("code",[t._v("React")]),t._v("，"),s("code",[t._v("React")]),t._v(" 是一个重运行时的框架，在数据发生变化后，并没有直接去操作 "),s("code",[t._v("dom")]),t._v("，而是生成一个新的所谓的虚拟 "),s("code",[t._v("dom")]),t._v("，它可以帮助我们解决跨平台和兼容性问题，并且通过 "),s("code",[t._v("diff")]),t._v(" 算法得出最小的操作行为，这些全部都是在运行时来做的。")]),t._v(" "),s("p",[t._v("最近很火的 "),s("code",[t._v("Svelte")]),t._v(" ，就是一个典型的重编译的框架，作为开发者我们只需要去写模版和数据，经过 "),s("code",[t._v("Svelte")]),t._v(" 的编译和预处理，代码基本全部会解析成原生的 "),s("code",[t._v("DOM")]),t._v(" 操作，"),s("code",[t._v("Svelte")]),t._v(" 的性能也是最接近原生 "),s("code",[t._v("js")]),t._v(" 的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/981d005ce5c349ba873894cd7947e57b_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("那么，"),s("code",[t._v("Vue")]),t._v(" 这个框架，在运行时和预编译取了一个很好地权衡，它保留了虚拟 "),s("code",[t._v("dom")]),t._v("，但是会通过响应式去控制虚拟 "),s("code",[t._v("dom")]),t._v(" 的颗粒度，在预编译里面，又做了足够多的性能优化，做到了按需更新。")]),t._v(" "),s("h2",{attrs:{id:"什么是编译时优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是编译时优化"}},[t._v("#")]),t._v(" 什么是编译时优化")]),t._v(" "),s("p",[s("code",[t._v("Vue")]),t._v(" 使用的是模版语法，模版 的特点，就是语法受限，我们可以使用 "),s("code",[t._v("v-if")]),t._v(" "),s("code",[t._v("v-for")]),t._v(" 这些指定的语法去编码，虽然这不够动态，但是由于语法是可枚举的，所以它可以在预编译层面做更多的预判，让 "),s("code",[t._v("Vue")]),t._v(" 在运行时有更好的性能。下面我们可以看一个 "),s("code",[t._v("Vue 3.0")]),t._v(" 具体在编译时所做的优化。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/7097ad04c8c34b369780fa4d5a7d6980_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("传统 "),s("code",[t._v("vdom")]),t._v(" 的 "),s("code",[t._v("Diff")]),t._v(" 算法总归要按照 "),s("code",[t._v("vdom")]),t._v(" 树的层级结构一层一层的遍历，所以 "),s("code",[t._v("diff")]),t._v(" 性能会和模版的大小正相关，跟动态节点的数量无关。在一些组件整个模版内只有少量动态节点的情况下，这些遍历都是性能的浪费。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/ba0b551523ad4ac39bb814bd2b87f283_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("比如说，上面的这个代码示例，这几个静态的节点在组件更新阶段，是不可能发生变化的。如果能在 "),s("code",[t._v("diff")]),t._v(" 阶段跳过静态内容，那我们就可以避免无用的 dom 树的遍历和比对。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/c78481a690bf426bbaf3f5efad3423be_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("Vue3.0")]),t._v(" 里面，就有这样一条类似的优化策略，它的 "),s("code",[t._v("compiler")]),t._v(" 可以根据节点的动态属性，为每个 虚拟 "),s("code",[t._v("dom")]),t._v(" 创建不同的 "),s("code",[t._v("patchflag")]),t._v("，比如说，节点具有动态的 "),s("code",[t._v("text")]),t._v("，或者具有动态的 "),s("code",[t._v("class")]),t._v("，都会被打上不同的 "),s("code",[t._v("patchflag")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/7ce4f6ed6ec9494491698a13392531b8_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("然后 "),s("code",[t._v("patchflag")]),t._v(" 再配合 "),s("code",[t._v("block tree")]),t._v("，就可以做到对不同节点的靶向更新。")]),t._v(" "),s("h2",{attrs:{id:"死磕运行时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死磕运行时"}},[t._v("#")]),t._v(" 死磕运行时")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/4278c601cfad453eaf3afedd209b1cd5_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("我们再回来看 "),s("code",[t._v("React")]),t._v(" ，它本身的思路是纯 "),s("code",[t._v("JS")]),t._v(" 写法，这种方式非常灵活，但是，这也使它在编译时很难做太多的事情，像上面这样的编译时优化是很难实现的。所以，我们可以看到 "),s("code",[t._v("React")]),t._v(" 几个大版本的的优化主要都在运行时。")]),t._v(" "),s("p",[t._v("那么，运行时我们主要关注什么问题呢？")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/c71fb7966f8e43348cb8f79735063425_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("首先，就是 CPU 的问题，主流浏览器的刷新频率一般是 "),s("code",[t._v("60Hz")]),t._v("，也就是每秒刷新 "),s("code",[t._v("60")]),t._v(" 次，大概 "),s("code",[t._v("16.6ms")]),t._v(" 浏览器刷新一次。由于 "),s("code",[t._v("GUI")]),t._v(" 渲染线程和 "),s("code",[t._v("JS")]),t._v(" 线程是互斥的，所以 "),s("code",[t._v("JS")]),t._v(" 脚本执行和浏览器布局、绘制不能同时执行。")]),t._v(" "),s("p",[t._v("在这 "),s("code",[t._v("16.6ms")]),t._v(" 的时间里，浏览器既需要完成 "),s("code",[t._v("JS")]),t._v(" 的执行，也需要完成样式的重排和重绘，如果 "),s("code",[t._v("JS")]),t._v(" 执行的时间过长，超出了 "),s("code",[t._v("16.6ms")]),t._v("，这次刷新就没有时间执行样式布局和样式绘制了，于是在页面上就会表现为卡顿。")]),t._v(" "),s("p",[s("code",[t._v("IO")]),t._v(" 的问题就比较好理解了，很多组件需要等待一些网络延迟，那么怎么样才能在网络延迟存在的情况下，减少用户对网络延迟的感知呢？就是我们需要解决的问题。")]),t._v(" "),s("p",[t._v("好，刚才我们聊完了为什么 "),s("code",[t._v("React")]),t._v(" 主要的优化策略都在运行时，以及运行时主要解决的问题，下面我们就来具体看一下，"),s("code",[t._v("React")]),t._v(" 最近的这几个大的版本都有什么更新和变化。")]),t._v(" "),s("h2",{attrs:{id:"react-15-半自动批处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-15-半自动批处理"}},[t._v("#")]),t._v(" React 15-半自动批处理")]),t._v(" "),s("p",[t._v("我们先来看看 "),s("code",[t._v("React 15")]),t._v(" ，"),s("code",[t._v("React")]),t._v(" 应该就是在这个版本之后开始火起来的，也是在这个版本之后，"),s("code",[t._v("React")]),t._v(" 的更新也变得越来越慢。")]),t._v(" "),s("h3",{attrs:{id:"架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[t._v("#")]),t._v(" 架构")]),t._v(" "),s("p",[t._v("这一版的架构，还比较简单，主要就是分 "),s("code",[t._v("Reconciler")]),t._v(" 和 "),s("code",[t._v("Renderer")]),t._v(" 两个部分。")]),t._v(" "),s("p",[t._v("![/notes/assets/performance/react/1d1558020ccf4de7a3505f32be45fddd_tplv-k3u1fbpfcp-watermark.awebp]")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("Reconciler")]),t._v("（协调器）—— 负责调用 "),s("code",[t._v("render")]),t._v(" 生成虚拟 Dom 进行 Diff，找出变化后的虚拟 Dom")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Renderer")]),t._v("（渲染器）—— 负责接到 "),s("code",[t._v("Reconciler")]),t._v(" 通知，将变化的组件渲染在当前宿主环境，比如浏览器，不同的宿主环境会有不同的 "),s("code",[t._v("Renderer")]),t._v("。")])])]),t._v(" "),s("h3",{attrs:{id:"批处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#批处理"}},[t._v("#")]),t._v(" 批处理")]),t._v(" "),s("p",[t._v("下面我们来回顾一下，"),s("code",[t._v("React 15")]),t._v(" 引入的一项优化：批处理，一道 "),s("code",[t._v("React")]),t._v(" 的经典面试题：「setState 到底是同步的还是异步的」就是来源于此，我面试的时候也会经常问，具体的我在两年前的一篇文章中有介绍过："),s("code",[t._v("由实际问题探究 setState 的执行机制")]),t._v(" 。")]),t._v(" "),s("p",[t._v("比如下面的代码，在一个生命周期里调用了四次 "),s("code",[t._v("setState")]),t._v("，其中最后两次在 "),s("code",[t._v("setTimeout")]),t._v(" 的回调中。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidMount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("我们来考虑一下两种情况：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("假设 "),s("code",[t._v("React")]),t._v(" 完全没有批处理机制，那么执行一个 "),s("code",[t._v("setState")]),t._v(" 就会立即触发一次页面渲染，打印顺序应该是 "),s("code",[t._v("1、2、3、4")])])]),t._v(" "),s("li",[s("p",[t._v("假设 "),s("code",[t._v("React")]),t._v(" 有一个完美的批处理机制，那么应该等整个函数执行完了之后再统一处理所有渲染，打印顺序应该是 "),s("code",[t._v("0、0、0、0")])])])]),t._v(" "),s("p",[t._v("实际上，在这个版本上面代码的打印顺序是 "),s("code",[t._v("0、0、2、3")]),t._v("，从 "),s("code",[t._v("setTimeout")]),t._v(" 回调里的打印结果我们就可以看出，"),s("code",[t._v("setState")]),t._v(" 调用本身就是同步的，而外面之所以不能立即拿到结果就是因为 React 的批处理机制。")]),t._v(" "),s("p",[t._v("正是因为 "),s("code",[t._v("setState")]),t._v(" 是同步的，当同时触发多次 "),s("code",[t._v("setState")]),t._v(" 时浏览器会一直被JS线程阻塞，那么那么浏览器就会掉帧，导致页面卡顿，所以 "),s("code",[t._v("React")]),t._v(" 才引入了批处理的机制，主要是为了将同一上下文中触发的更新合并为一个更新。")]),t._v(" "),s("p",[t._v("我们可以来看下源码中 "),s("code",[t._v("_processPendingState")]),t._v(" 这个函数，这个函数是用来合并 "),s("code",[t._v("state")]),t._v(" 暂存队列的，最后返回一个合并后的 "),s("code",[t._v("state")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("_processPendingState")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" inst "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_pendingStateQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" replace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_pendingReplaceState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_pendingReplaceState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_pendingStateQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" inst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("replace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nextState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" replace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" inst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" replace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" partial "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" partial "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("partial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" partial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nextState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),s("p",[t._v("我们只需要关注下面这段代码：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" partial "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("partial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" partial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果传入的是对象，很明显会被合并成一次：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n nextState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果传入的是函数，函数的参数 "),s("code",[t._v("preState")]),t._v(" 是前一次合并后的结果，所以计算结果是准确的。")]),t._v(" "),s("p",[t._v("如果在需要处理批处理的环境中（"),s("code",[t._v("React")]),t._v("生命周期、合成事件中）无论调用多少次 "),s("code",[t._v("setState")]),t._v("，都会不会执行更新，而是将要更新的 "),s("code",[t._v("state")]),t._v(" 存入 "),s("code",[t._v("_pendingStateQueue")]),t._v("，将要更新的组件存入 "),s("code",[t._v("dirtyComponent")]),t._v("。当上一次更新机制执行完毕，以生命周期为例，所有组件，即最顶层组件 "),s("code",[t._v("didmount")]),t._v(" 后会将 "),s("code",[t._v("isBranchUpdate")]),t._v(" 设置为false。这时将执行之前累积的 "),s("code",[t._v("setState")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("React")]),t._v(" 内部会通过一个 "),s("code",[t._v("batchedUpdates")]),t._v(" 函数去调用所有需要批处理的函数，执行逻辑大概如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("batchedUpdates")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onClick"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" batchedUpdates"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ....")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("因为 "),s("code",[t._v("batchedUpdates")]),t._v(" 本身是同步调用的，如果 fn 内部有异步执行，这时批处理早已执行完，所以这个版本的批处理无法处理异步函数，也被称作是半自动批处理。")]),t._v(" "),s("p",[t._v("所以呢，"),s("code",[t._v("React")]),t._v(" 给我们提供了 "),s("code",[t._v("unstable batchedUpdates")]),t._v(" 这样的函数支持我们手动执行批处理。")]),t._v(" "),s("h3",{attrs:{id:"react-15-的缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-15-的缺陷"}},[t._v("#")]),t._v(" React 15 的缺陷")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/c5593d41ca9c4ca4b5c5fb0dc24c0e33_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("虽然在 "),s("code",[t._v("React 15")]),t._v(" 中引入批处理这样的优化逻辑，但是由于 "),s("code",[t._v("React 15")]),t._v(" 本身的架构是递归同步更新的，如果节点非常多，即使只有一次 "),s("code",[t._v("state")]),t._v(" 变更，"),s("code",[t._v("React")]),t._v(" 也需要进行复杂的递归更新，更新一旦开始，中途就无法中断，直到遍历完整颗树，才能释放主线程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/780b09e9503346eaa39dad7146917879_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("我们可以参考图中的这个例子，当层级很深时，递归更新时间超过了 "),s("code",[t._v("16ms")]),t._v(" ，如果这时有用户操作或动画渲染等，就会表现为卡顿。")]),t._v(" "),s("h2",{attrs:{id:"react-16-让-concurrent-mode-成为可能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-16-让-concurrent-mode-成为可能"}},[t._v("#")]),t._v(" React 16 - 让 Concurrent Mode 成为可能")]),t._v(" "),s("h3",{attrs:{id:"架构-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#架构-2"}},[t._v("#")]),t._v(" 架构")]),t._v(" "),s("p",[t._v("下面，我们再来看看 "),s("code",[t._v("React 16")]),t._v(" 这个版本，相比 "),s("code",[t._v("React 15")]),t._v("，我们可以看到新的架构中多了一层 "),s("code",[t._v("Scheduler")]),t._v("，也就是调度器，然后在 "),s("code",[t._v("Reconciler")]),t._v(" 这一层，使用 "),s("code",[t._v("Fiber")]),t._v(" 架构进行了重构。具体的细节我们会在后面的章节进介绍。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/a8434bf032094c1aaba7af6e8f2f24ed_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("Scheduler")]),t._v("（调度器）—— 调度任务的优先级，高优任务优先进入 "),s("code",[t._v("Reconciler")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Reconciler")]),t._v("（协调器）—— 负责找出变化的组件（使用 "),s("code",[t._v("Fiber")]),t._v(" 重构）")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Renderer")]),t._v("（渲染器）—— 负责将变化的组件渲染到页面上")])])]),t._v(" "),s("p",[s("code",[t._v("React")]),t._v(" ，也在后续的几个大版本中，都沿用了这个架构。")]),t._v(" "),s("p",[t._v("除了架构上的变化，"),s("code",[t._v("React")]),t._v(" 在这个版本提出了一个非常重要的概念，"),s("code",[t._v("Concurrent Mode")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"concurrent-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrent-mode"}},[t._v("#")]),t._v(" Concurrent Mode")]),t._v(" "),s("p",[s("code",[t._v("React")]),t._v(" 官方的描述，是这样的：")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Tips")]),t._v(" "),s("p",[t._v("Concurrent 模式是一组 React 的新功能，可帮助应用保持响应，并根据用户的设备性能和网速进行适当的调整。")])]),t._v(" "),s("p",[t._v("为了让应用保持响应，我们需要先了解是什么在制约应用保持响应？")]),t._v(" "),s("p",[t._v("里面比较重点的就是，让应用保持响应，我们可以先想一下到底是啥在限制应用保持响应呢？")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("CPU")]),t._v(" 上，我们的主要问题是，在 JS 执行超过 "),s("code",[t._v("16.6 ms")]),t._v(" 时，页面就会产生卡顿，那么 "),s("code",[t._v("React")]),t._v("  的解决思路，就是在浏览器每一帧的时间中预留一些时间给 JS 线程，"),s("code",[t._v("React")]),t._v(" 利用这部分时间更新组件。当预留的时间不够用时，"),s("code",[t._v("React")]),t._v(" 将线程控制权交还给浏览器让他有时间渲染UI，"),s("code",[t._v("React")]),t._v(" 则等待下一帧再继续被中断的工作。")]),t._v(" "),s("p",[t._v("其实，上面我们提到的，这种将长任务分拆到每一帧中，每一帧执行一小段任务的操作，就是我们常说的时间切片。")]),t._v(" "),s("p",[t._v("那么在 IO 上面，需要解决的是发送网络请求后，由于需要等待数据返回才能进一步操作导致不能快速响应的问题。"),s("code",[t._v("React")]),t._v(" 希望通过控制组件渲染的优先级去解决这个问题。")]),t._v(" "),s("p",[t._v("实际上，"),s("code",[t._v("Concurrent Mode")]),t._v(" 就是为了解决以上两个问题而设计的一套新的架构，重点就是，让组件的渲染 “可中断” 并且具有 “优先级”，其中包括几个不同的模块，他们各自负责不同的工作。 首先，我们先来看看，如何让组件的渲染 “可中断” 呢？")]),t._v(" "),s("h3",{attrs:{id:"底层架构-fiber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#底层架构-fiber"}},[t._v("#")]),t._v(" 底层架构 - Fiber")]),t._v(" "),s("p",[t._v("在上面的章节我们讲到 "),s("code",[t._v("React15")]),t._v(" 的 "),s("code",[t._v("Reconciler")]),t._v(" 采用递归的方式执行，数据保存在递归调用栈中，这种递归的遍历方式肯定是无法中断的。")]),t._v(" "),s("p",[t._v("所以，"),s("code",[t._v("React")]),t._v(" 花费2年时间重构完成了Fiber架构，"),s("code",[t._v("React16")]),t._v(" 的 "),s("code",[t._v("Reconciler")]),t._v(" 基于 "),s("code",[t._v("Fiber")]),t._v(" 节点实现。每个 "),s("code",[t._v("Fiber")]),t._v(" 节点对应一个 "),s("code",[t._v("React elemen")]),t._v("t，注意一下，这里是对应，而不是等于。我们调用 "),s("code",[t._v("render")]),t._v(" 函数产生的结果是 "),s("code",[t._v("React element")]),t._v("，而 "),s("code",[t._v("Fiber")]),t._v(" 节点，由 "),s("code",[t._v("React Element")]),t._v(" 创建而来。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/d581d9b5a3f74050a600d24c528c3e3b_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("下面是一个 "),s("code",[t._v("Fiber")]),t._v(" 节点的示例，除了包含 组件的类型，组件对应的 "),s("code",[t._v("DOM")]),t._v(" 信息之外，"),s("code",[t._v("Fiber")]),t._v(" 节点还保存了本次更新中该组件改变的状态、要执行的工作，需要被删除，被插入页面中，还是被更新。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FiberNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" WorkTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  pendingProps"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" mixed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TypeOfMode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为静态数据结构的属性")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于连接其他Fiber节点形成Fiber树")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 动态工作单元的属性")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pendingProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoEffect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调度优先级相关")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childLanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向该fiber在另一次更新时对应的fiber")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("另外，我们还可以看到当前节点与其他节点的链接关系，一个 "),s("code",[t._v("Fiber")]),t._v(" 节点包括了他的 "),s("code",[t._v("child")]),t._v("（第一个子节点）、"),s("code",[t._v("sibling")]),t._v("（兄弟节点）、"),s("code",[t._v("return")]),t._v("（父节点）等属性。")]),t._v(" "),s("h4",{attrs:{id:"双缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双缓存"}},[t._v("#")]),t._v(" 双缓存")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/97ccd97a30fa422fa7ffa1efc71326bd_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("React")]),t._v(" 中最多会同时存在两棵Fiber树。当前屏幕上显示内容对应的Fiber树叫做 "),s("code",[t._v("current Fiber")]),t._v(" 树，正在内存中构建的Fiber树叫做 "),s("code",[t._v("workInProgress Fiber")]),t._v("树，他们通过一个 "),s("code",[t._v("alternate")]),t._v(" 属性连接。")]),t._v(" "),s("p",[t._v("React应用的根节点会使用一个 "),s("code",[t._v("current")]),t._v(" 指针指向当前的 "),s("code",[t._v("current Fiber")]),t._v(" 树。\n当 "),s("code",[t._v("workInProgress Fiber")]),t._v(" 树构建完成交给 Renderer 渲染在页面上后，应用根节点的 "),s("code",[t._v("current")]),t._v(" 指针就会 指向 "),s("code",[t._v("workInProgress Fiber")]),t._v(" 树，此时 "),s("code",[t._v("workInProgress Fiber")]),t._v(" 树就变为 "),s("code",[t._v("current Fiber")]),t._v(" 树。")]),t._v(" "),s("p",[t._v("由于 "),s("code",[t._v("React")]),t._v(" 将渲染 DOM 树的机制改成了两个 "),s("code",[t._v("Fiber")]),t._v(" 树交替工作的形式，所以可以在更新全部完成之后再切换指针指向，而在指针切换之前，我们随时可以放弃对另一颗树的修改。这，就让更新可中断成为了可能。")]),t._v(" "),s("p",[t._v("在上面，我们提到了几个概念，"),s("code",[t._v("current Fiber")]),t._v("、"),s("code",[t._v("workInProgress Fiber")]),t._v("、jsx 对象 也就是 "),s("code",[t._v("React Element")]),t._v("、还有真正的 DOM 节点。")]),t._v(" "),s("p",[t._v("那么，"),s("code",[t._v("Reconciler")]),t._v(" 的工作就是使用 Diff 算法对比 "),s("code",[t._v("current Fiber")]),t._v(" 和 "),s("code",[t._v("React Element")]),t._v(" ，生成 "),s("code",[t._v("workInProgress Fiber")]),t._v(" ，这个阶段是可中断的，"),s("code",[t._v("Renderer")]),t._v(" 的工作是把 "),s("code",[t._v("workInProgress Fiber")]),t._v(" 转换成真正的 DOM 节点。")]),t._v(" "),s("h3",{attrs:{id:"调度器-scheduler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调度器-scheduler"}},[t._v("#")]),t._v(" 调度器 - Scheduler")]),t._v(" "),s("p",[t._v("如果我们，还是用 "),s("code",[t._v("ReactDOM.render")]),t._v(" 去同步运行 "),s("code",[t._v("Fiber")]),t._v(" 架构，则 "),s("code",[t._v("Fiber")]),t._v(" 架构与重构前并无区别。但是当我们配合上面提到的时间切片，就可以根据当前的宿主环境性能，为每个工作单元分配一个可运行时间，从而实现“异步可中断的更新”。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/c736e1c6dde14fe1a8674988708f753e_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("Scheduler")]),t._v(" 就可以帮我们完成这件事情，我们可以看到，我们一次耗时很长的更新任务被拆分成一小段一小段的。这样浏览器就有剩余时间执行样式布局和样式绘制，减少掉帧的可能性。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/a5b310f4723c457c9b91ed109cd5fc10_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("图中的动画效果，也变得非常丝滑。")]),t._v(" "),s("h4",{attrs:{id:"requestidelcallback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestidelcallback"}},[t._v("#")]),t._v(" requestIdelCallback")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/a8bad5b667a04119be0a9e3f5ccb4fd6_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("上面的图中，是浏览器一帧中做的一些事情，这里我们可以看到，当所有事情都做完了之后，会调用一个 "),s("code",[t._v("requestIdleCallback")]),t._v(" 函数，在这个函数里我们可以拿到浏览器当前一祯的剩余时间。")]),t._v(" "),s("p",[t._v("那这个 "),s("code",[t._v("API")]),t._v(" 可以用来干啥呢？ 我们来看一个例子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/278b21324f784234a8443e830beacb0b_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("假如我们有左侧代码中这样非常长的耗时任务需要执行，不再经过其他额外处理的情况下，执行整个任务的执行时间肯定是超过 "),s("code",[t._v("16.6ms")]),t._v(" 的。")]),t._v(" "),s("p",[t._v("这里我们借助 "),s("code",[t._v("requestIdleCallback")]),t._v(" 这个函数，可以将一个大任务分割成多个个小任务，在每一帧有空余时间情况下，逐步去执行小任务。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/90fcd33e759845f8b3bd249fa3b1fc4c_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("借助这个 "),s("code",[t._v("API")]),t._v(" ，我们就可以让浏览器仅在空闲时期的时候执行脚本。时间切片的本质，也就是模拟实现 "),s("code",[t._v("requestIdleCallback")]),t._v(" 这个函数。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Tips")]),t._v(" "),s("p",[t._v("由于兼容性和刷新帧率的问题，"),s("code",[t._v("React")]),t._v(" 并没有直接使用 "),s("code",[t._v("requestIdleCallback")]),t._v(" ， 而是使用了 "),s("code",[t._v("MessageChannel")]),t._v(" 模拟实现，原理是一样的。")])]),t._v(" "),s("h4",{attrs:{id:"中断更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断更新"}},[t._v("#")]),t._v(" 中断更新")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("React")]),t._v(" 的 "),s("code",[t._v("render")]),t._v(" 阶段，开启 "),s("code",[t._v("Concurrent Mode")]),t._v(" 时，每次遍历前，都会通过 "),s("code",[t._v("Scheduler")]),t._v(" 提供的 "),s("code",[t._v("shouldYield")]),t._v(" 方法判断是否需要中断遍历，使浏览器有时间渲染，参考下面的 "),s("code",[t._v("workLoopConcurrent")]),t._v(" 函数。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopConcurrent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Perform work until Scheduler asks us to yield")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldYield")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("是否中断的判断依据，最重要的一点便是每个任务的剩余时间是否用完，"),s("code",[t._v("shouldYield()")]),t._v(" 函数的作用就是检查时间是否到期。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shouldYield(...) --\x3e Scheduler_shouldYield(...) --\x3e unstable_shouldYield(...)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e shouldYieldToHost(...)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e getCurrentTime() >= deadline")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" yieldInterval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" deadline "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("performWorkUntilDeadline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" currentTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCurrentTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      deadline "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" yieldInterval\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("可以看到，在 "),s("code",[t._v("Schdeduler")]),t._v(" 中，那么每次到期，就会跳出工作循环，把线程的控制权交给浏览器，然后下次任务再继续当前的工作。这样，一个长的 "),s("code",[t._v("JS")]),t._v(" 任务就会被切割成多个小段的任务。")]),t._v(" "),s("p",[t._v("下面我们可以看下这段代码，"),s("code",[t._v("yieldInterval")]),t._v(" 会根据当前设备的 "),s("code",[t._v("fps")]),t._v(" 进行动态计算，这就响应了前面我们提到了 "),s("code",[t._v("Concurrent Mode")]),t._v(" 这个概念的的定义，帮助应用保持响应，并根据用户的设备性能和网速进行适当的调整。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  yieldInterval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" fps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reset the framerate")]),t._v("\n  yieldInterval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("Fiber")]),t._v(" 架构配合 "),s("code",[t._v("Scheduler")]),t._v(" 实现了 "),s("code",[t._v("Concurrent Mode")]),t._v(" 的底层 — “异步可中断的更新”。")]),t._v(" "),s("h4",{attrs:{id:"isinputpending"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isinputpending"}},[t._v("#")]),t._v(" isInputPending")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/c9ed74922f9748f9abf87fa3b89780ab_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("那么，现在，其实我们不仅仅是在使用 "),s("code",[t._v("React")]),t._v(" 的时候才能享受到这个优化策略。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("Chrome 87")]),t._v(" 版本，"),s("code",[t._v("React")]),t._v(" 团队和 Chrome 团队合作，在浏览器上加入了一个新的 API "),s("code",[t._v("isInputPending")]),t._v("。这也是第一个将中断这个操作系统概念用于网页开发的API。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/c90ff37baa134901a3bc0064e4037d87_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("即便不使用 "),s("code",[t._v("React")]),t._v("，我们也可以利用这个 "),s("code",[t._v("API")]),t._v("，来平衡 "),s("code",[t._v("JS")]),t._v(" 执行、页面渲染及用户输入之间的优先级。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/59f06fd3b48e408d8dffd27ad49634fb_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("我们可以看上面的代码示例，通过合理使用 "),s("code",[t._v("isInputPending")]),t._v(" 方法，我们可以在页面渲染的时候及时响应用户输入，并且，当有长耗时的JS任务要执行时，可以通过 "),s("code",[t._v("isInputPending")]),t._v(" 来中断JS的执行，将控制权交还给浏览器来执行用户响应。")]),t._v(" "),s("h3",{attrs:{id:"优先级控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先级控制"}},[t._v("#")]),t._v(" 优先级控制")]),t._v(" "),s("p",[t._v("如果一次更新在运行过程中被中断，然后重新开始一次新的更新，我们可以说：后一次更新打断了前一次更新。")]),t._v(" "),s("p",[t._v("举一个简单的例子，我们现在正在吃饭，突然你女朋友给你打电话，你可能要先中断吃饭的操作，接完电话，再继续吃饭。")]),t._v(" "),s("p",[t._v("也就是说，接电话这个操作的优先级，就要高于吃饭的优先级。React 根据人机交互的研究结果，为不同场景下产生的状态更新，赋予了不同的优先级，比如：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果是生命周期方法：是最高优先级、同步执行的。")])]),t._v(" "),s("li",[s("p",[t._v("受控的用户输入：比如输入框内输入文字，同步执行。")])]),t._v(" "),s("li",[s("p",[t._v("一些交互事件：比如动画，高优先级执行。")])]),t._v(" "),s("li",[s("p",[t._v("其他：比如数据请求，或者使用了 "),s("code",[t._v("suspense")]),t._v("、"),s("code",[t._v("transition")]),t._v(" 这样的更新，是低优先级执行的。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/5bb1243eb8924d7bbc3bfd96f64adb96_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("比如，我们来看一下图中的这两次更新：首先，我们有一个改变当前主题的这样一个更新，这个更新呢，优先级比较低，而且比较耗时。那么，在主题改变这个状态更新的 "),s("code",[t._v("render")]),t._v(" 阶段还没完成的时候，这时用户在 "),s("code",[t._v("Input")]),t._v(" 框输入了一个新的字符。")]),t._v(" "),s("p",[t._v("用户输入这个操作的优先级是比较高的，这时，我们就会先中断 主题更新 这个操作，优先响应用户输入，然后呢再基于上一次更新的结果，继续进行 主题更新的 "),s("code",[t._v("render")]),t._v(" 和 commit 流程。\n这，就是一次高优任务中断低优任务的操作。下面，我们再来看看 "),s("code",[t._v("React")]),t._v(" 源码里，优先级是怎样实现的。")]),t._v(" "),s("h4",{attrs:{id:"任务优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务优先级"}},[t._v("#")]),t._v(" 任务优先级")]),t._v(" "),s("p",[t._v("我们先来看看这段代码，里面声明了五种不同的优先级：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("ImmediatePriority")]),t._v(": 代表立即执行的优先级，级别最高")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("UserBlockingPriority")]),t._v("：代表用户阻塞级别的优先级")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("NormalPriority")]),t._v("：这个就是最常见的正常的优先级")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("LowPriority")]),t._v("：代表较低的优先级")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("IdlePriority")]),t._v("：优先级最低，表示任务是可以闲置的")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/85440c18537b495b867dd2d660dc168d_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("React")]),t._v(" 内部，只要是涉及到优先级调度的地方，都会使用 "),s("code",[t._v("runWithPriority")]),t._v(" 这个函数，这个函数接受一个优先级还有一个回调函数，在这个回调函数的内部调用中，获取优先级的方法都会取到第一个参数传入的优先级。")]),t._v(" "),s("p",[t._v("那么，这几种不同的优先级变量，怎么影响到具体的更新任务呢？")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/be143f7265984167b407fa8254357b07_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("我们可以看一下上面的代码，通过不同的优先级变量，我们会计算得出不同时长的过期时间 "),s("code",[t._v("expirationTime")]),t._v("。每个更新任务都会有一个 "),s("code",[t._v("expirationTime")]),t._v("， 任务的过期时间离当前时间越近，说明这个任务的优先级越高。")]),t._v(" "),s("p",[t._v("那么，"),s("code",[t._v("expirationTime")]),t._v(" ，是通过 "),s("code",[t._v("startTime")]),t._v(" 也就是当前时间，加上一个 "),s("code",[t._v("timeout")]),t._v(" 得出的。比如 "),s("code",[t._v("ImmediatePriority")]),t._v(" 对应的 timeout 是 -1，那么这个任务的过期时间比当前时间还短，表示他已经过期了，需要立即被执行。")]),t._v(" "),s("p",[t._v("那么，我们一整个 "),s("code",[t._v("React")]),t._v(" 应用呢，在同一时间可能会产生不同的任务，我们的 "),s("code",[t._v("Scheduler")]),t._v(" 呢，就会优先帮我们找到最高优先级的任务，去调度它的更新。那么，怎么才能最快的找到高优先级的任务呢？")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/2e324f27850241c29b0a7deb02014e02_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("实际上，"),s("code",[t._v("Scheduler")]),t._v(" 将所有已经准备就绪，可以执行的任务，都存在了一个叫 "),s("code",[t._v("taskQueue")]),t._v(" 的队列中，而这个队列使用了小顶堆这种数据结构。在小顶堆中，所有的任务按照任务的过期时间，从小到大进行排列，这样 "),s("code",[t._v("Scheduler")]),t._v(" 就可以只花费O(1)复杂度找到队列中最早过期，或者说最高优先级的那个任务。")]),t._v(" "),s("h4",{attrs:{id:"fiber优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber优先级"}},[t._v("#")]),t._v(" Fiber优先级")]),t._v(" "),s("p",[t._v("那么，我们刚刚讲到的这个优先级的机制，实际上是 "),s("code",[t._v("React")]),t._v(" 的 "),s("code",[t._v("Scheduler")]),t._v(" 的优先级机制，在 "),s("code",[t._v("React")]),t._v(" 内部，"),s("code",[t._v("Scheduler")]),t._v(" 是一个独立包，它只负责任务的调度，甚至不关心这个任务具体是干什么，即使我们将 "),s("code",[t._v("Scheduler")]),t._v(" 脱离 "),s("code",[t._v("React")]),t._v(" 使用，也是可以的。")]),t._v(" "),s("p",[t._v("所以 "),s("code",[t._v("Scheduler")]),t._v(" 内部的优先级机制也是独立于 "),s("code",[t._v("React")]),t._v(" 的， React 内部也有一套自己的优先级机制，因为我们需要知道在一棵 "),s("code",[t._v("Fiber")]),t._v(" 树里，哪些 "),s("code",[t._v("Fiber")]),t._v(" 以及 哪些 Update 对象，是高优先级的。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("React16")]),t._v(" 中，"),s("code",[t._v("Fiber")]),t._v(" 和 "),s("code",[t._v("Update")]),t._v(" 的优先级和 任务的优先级 是类似。"),s("code",[t._v("React")]),t._v(" 会根据不同的操作优先级给每个 "),s("code",[t._v("Fiber")]),t._v(" 节点的 "),s("code",[t._v("Update")]),t._v(" 增加一个 "),s("code",[t._v("expirationTime")]),t._v(" 。\n但是由于某些问题，"),s("code",[t._v("React")]),t._v(" 已经在 "),s("code",[t._v("Fiber")]),t._v(" 中不再使用 "),s("code",[t._v("expirationTime")]),t._v(" 去表示优先级，这个我们后面再讲。")]),t._v(" "),s("h3",{attrs:{id:"生命周期的改变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期的改变"}},[t._v("#")]),t._v(" 生命周期的改变")]),t._v(" "),s("p",[t._v("在新的 "),s("code",[t._v("React")]),t._v(" 架构中，一个组件的渲染被分为两个阶段：第一个阶段（也叫做 "),s("code",[t._v("render")]),t._v(" 阶段）是可以被 "),s("code",[t._v("React")]),t._v(" 打断的，一旦被打断，这阶段所做的所有事情都被废弃，当 "),s("code",[t._v("React")]),t._v(" 处理完紧急的事情回来，依然会重新渲染这个组件，这时候第一阶段的工作会重做一遍。")]),t._v(" "),s("p",[t._v("第二个阶段叫做 "),s("code",[t._v("commit")]),t._v(" 阶段，一旦开始就不能中断，也就是说第二个阶段的工作会直接做到这个组件的渲染结束。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/3d1cf760ebe44eb2a17e85b08b82f7d2_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("两个阶段的分界点，就是 "),s("code",[t._v("render")]),t._v(" 函数。"),s("code",[t._v("render")]),t._v(" 函数之前的所有生命周期函数（包括 "),s("code",[t._v("render")]),t._v(")都属于第一阶段，之后的都属于第二阶段。开启 "),s("code",[t._v("Concurrent Mode")]),t._v(" 之后， "),s("code",[t._v("render")]),t._v(" 之前的所有生命周期都有可能会被打断，或者重复调用：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("componentWillMount")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("componentWillReceiveProps")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("componentWillUpdate")])])])]),t._v(" "),s("p",[t._v("如果我们在这些生命中期中引入了副作用，被重复执行，就可能会给我们的程序带来不可预知的问题，所以到了 "),s("code",[t._v("React v16.3")]),t._v("，"),s("code",[t._v("React")]),t._v(" 干脆引入了一个新的生命周期函数 "),s("code",[t._v("getDerivedStateFromProps")]),t._v("，这个生命周期是一个 静态方法，在里面根本不能通过 "),s("code",[t._v("this")]),t._v(" 访问到当前组件，输入只能通过参数，对组件渲染的影响只能通过返回值。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/20082c3c52e3420289744a59bdfff7d0_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("所以，"),s("code",[t._v("getDerivedStateFromProps")]),t._v(" 一定是一个纯函数，"),s("code",[t._v("React")]),t._v(" 就是通过要求这种纯函数，强制开发者们必须适应 "),s("code",[t._v("Concurrent Mode")]),t._v(" 。")]),t._v(" "),s("p",[t._v("那，经过了上面的可中断、和优先级的实现， "),s("code",[t._v("React")]),t._v(" 已经可以让程序在突破 CPU 的问题，实现保持响应了，那么 IO 的问题呢？")]),t._v(" "),s("h3",{attrs:{id:"suspense"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#suspense"}},[t._v("#")]),t._v(" Suspense")]),t._v(" "),s("p",[s("code",[t._v("React 16.6")]),t._v(" 新增了 "),s("code",[t._v("<Suspense>")]),t._v(" 组件，它主要是解决运行时的 IO 问题。")]),t._v(" "),s("p",[s("code",[t._v("Suspense")]),t._v(" 可以让组件 “等待” 某个异步操作，直到该异步操作结束再进行渲染。我们可以参考下面这段代码，我们通过 "),s("code",[t._v("Suspense")]),t._v(" 实现了一个组件的懒加载。")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" MonacoEditor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lazy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-monaco-editor'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      \n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Suspense")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("fallback")]),s("span",{pre:!0,attrs:{class:"token script language-javascript"}},[s("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("Editor Loading...")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MonacoEditor")])]),t._v(" \n     "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token script language-javascript"}},[s("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(" \n     "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("language")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" \n     "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("theme")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("vs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" \n     "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token script language-javascript"}},[s("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("errorFileContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(" \n     "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("options")]),s("span",{pre:!0,attrs:{class:"token script language-javascript"}},[s("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Suspense")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("那么为啥说 "),s("code",[t._v("Suspense")]),t._v(" 可以解决 IO 的问题呢？我们自己通过其他的方式也可以实现这个懒加载。")]),t._v(" "),s("p",[t._v("使用用 "),s("code",[t._v("Suspense")]),t._v(" ，我们可以降低加载状的优先级，减少闪屏的问题。 比如数据很快返回的时候，我们可以不必显示加载状态，而是直接显示出来，避免闪屏；如果超时没有返回才显式加载状态。本质上讲 "),s("code",[t._v("Suspense")]),t._v(" 内的组件子树比组件树的其他部分拥有更低的优先级\n我们可以试想一下，如果没有 Suspense ，我们可能要去自己实现一个 "),s("code",[t._v("loading")]),t._v("，那么这个 "),s("code",[t._v("loading")]),t._v(" 和其他组件渲染具有相同的优先级，这时无论 "),s("code",[t._v("IO")]),t._v(" 有多快，我们的屏幕都会闪一下。")]),t._v(" "),s("p",[t._v("那么如果在请求 "),s("code",[t._v("IO")]),t._v(" 的这段时间里，我们利用这段时间加载了其他的组件，只要时间足够小，我们就不需要展示 "),s("code",[t._v("Lodaing")]),t._v("，这样就可以减少闪屏的问题。")]),t._v(" "),s("p",[t._v("当然，"),s("code",[t._v("Suspense")]),t._v(" 的作用不止于此，它更重要的还是优化了在 "),s("code",[t._v("React")]),t._v(" 内部等待异步操作写法的问题，这个呢，在这里我们就不展开讲了。")]),t._v(" "),s("h3",{attrs:{id:"react-16-的缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-16-的缺陷"}},[t._v("#")]),t._v(" React 16 的缺陷")]),t._v(" "),s("p",[t._v("虽然 "),s("code",[t._v("React 16")]),t._v(" 的核心工作全部都是在 "),s("code",[t._v("Concurrent Mode")]),t._v("  上，但是这并不代表 "),s("code",[t._v("Concurrent Mode")]),t._v("  已经可以稳定使用了，"),s("code",[t._v("React 16")]),t._v(" 做的这些所有的工作只是让 "),s("code",[t._v("Concurrent Mode")]),t._v("  称为可能，并且在 "),s("code",[t._v("Concurrent Mode")]),t._v("  下做了一些小小的尝试，在 16 版本默认仍然是采用同步渲染的模式，为了后面的大范围开启 "),s("code",[t._v("Concurrent Mode")]),t._v(" ，他还有很多努力要做。")]),t._v(" "),s("h2",{attrs:{id:"react-17-稳定-concurrent-mode-的过渡版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-17-稳定-concurrent-mode-的过渡版本"}},[t._v("#")]),t._v(" React 17 - 稳定 Concurrent Mode 的过渡版本")]),t._v(" "),s("h3",{attrs:{id:"没有新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#没有新特性"}},[t._v("#")]),t._v(" 没有新特性？")]),t._v(" "),s("p",[t._v("我们可以看到 "),s("code",[t._v("React17")]),t._v(" 的更新日志里基本没有什么新特性，但是从官方仅有的一些描述中我们可以发现："),s("code",[t._v("React17")]),t._v(" 是一个用以稳定CM的过渡版本。")]),t._v(" "),s("p",[t._v("由于 "),s("code",[t._v("Concurrent Mode")]),t._v(" 带来的 "),s("code",[t._v("Breaking Change")]),t._v(" 会使很多库都不兼容，我们不可能都在新项目里去用，所以 "),s("code",[t._v("React")]),t._v(" 给我们提供了支持单项目多版本共存的支持，另外还有一个很重要的支持就是：使用 "),s("code",[t._v("Lanes")]),t._v(" 重构了 "),s("code",[t._v("CM")]),t._v(" 的优先级算法。")]),t._v(" "),s("h3",{attrs:{id:"实现多版本共存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现多版本共存"}},[t._v("#")]),t._v(" 实现多版本共存")]),t._v(" "),s("p",[t._v("先简单说一下多版本共存。")]),t._v(" "),s("p",[s("code",[t._v("React")]),t._v(" 采用的是 事件委托 的方式，它自己实现了一套事件机制，自己模拟了事件冒泡和捕获的过程，主要是为了抹平了各个浏览器的兼容性问题。")]),t._v(" "),s("p",[t._v("比如它并不会在你声明它们的时候就将它们 "),s("code",[t._v("attach")]),t._v(" 到对应 "),s("code",[t._v("DOM")]),t._v(" 节点上。 相反地，"),s("code",[t._v("React")]),t._v(" 会直接在 "),s("code",[t._v("document")]),t._v(" 节点上为每种事件类型 "),s("code",[t._v("attach")]),t._v(" 一个处理器。这种方法不但在大型应用树上有性能优势，还会使添加新功能更容易。")]),t._v(" "),s("p",[t._v("但是如果页面上有多个 "),s("code",[t._v("React")]),t._v(" 版本，它们都会在 "),s("code",[t._v("document")]),t._v(" 上注册事件。这会破坏 事件冒泡这些机制，外部的树仍然会接收到这个事件，这就使嵌套不同版本的 "),s("code",[t._v("React")]),t._v(" 难以实现。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/a304da8dd87649c6b8a33413c89e203a_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("这就是 "),s("code",[t._v("React")]),t._v(" 要改变 "),s("code",[t._v("attach")]),t._v(" 事件到 "),s("code",[t._v("DOM")]),t._v(" 的底层实现方式的原因。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("React 17")]),t._v(" 中，"),s("code",[t._v("React")]),t._v(" 会把事件 "),s("code",[t._v("attach")]),t._v(" 到 "),s("code",[t._v("React")]),t._v(" 渲染树的根 "),s("code",[t._v("DOM")]),t._v(" 容器中，而不再 "),s("code",[t._v("attach")]),t._v(" 到 "),s("code",[t._v("document")]),t._v(" 级别 ：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rootNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("App")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rootNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这让多版本共存成为可能。")]),t._v(" "),s("h3",{attrs:{id:"新的优先级算法-lanes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新的优先级算法-lanes"}},[t._v("#")]),t._v(" 新的优先级算法 - lanes")]),t._v(" "),s("p",[t._v("上面的我们讲到，"),s("code",[t._v("Scheduler")]),t._v(" 中的优先级和 React 中的优先级是不一致的，在 "),s("code",[t._v("React 16")]),t._v(" "),s("code",[t._v("之前，React")]),t._v(" 在 "),s("code",[t._v("Fiber")]),t._v(" 中也使用 "),s("code",[t._v("expirationTime")]),t._v(" 表示优先级，但是在 "),s("code",[t._v("React 17")]),t._v(" 中，"),s("code",[t._v("React")]),t._v(" 使用 "),s("code",[t._v("Lanes")]),t._v(" 重构了 Fiber 的优先级算法。")]),t._v(" "),s("p",[t._v("那么，以前的 "),s("code",[t._v("expirationTime")]),t._v(" 有什么问题呢？在 "),s("code",[t._v("expirationTime")]),t._v(" 最开始被设计的时候，React 体系中还没有 "),s("code",[t._v("Suspense")]),t._v(" 异步渲染 的概念。假如现在有这样的场景: 有 3 个任务, 其优先级 A > B > C，正常来讲只需要按照优先级顺序执行就可以。")]),t._v(" "),s("p",[t._v("但是现在有这样的情况：A 和 C 任务是 CPU 密集型，而 B 是IO密集型 （"),s("code",[t._v("Suspense")]),t._v(" 会调用远程 api, 算是 IO 任务）， 即 "),s("code",[t._v("A(cpu) > B(IO) > C(cpu)")]),t._v("，在这种情况下呢，高优先级 "),s("code",[t._v("IO")]),t._v(" 任务会中断低优先级 "),s("code",[t._v("CPU")]),t._v(" 任务，这显然，是不合理的。")]),t._v(" "),s("p",[t._v("那么使用 "),s("code",[t._v("expirationTime")]),t._v(" ，它是以某一优先级作为整棵树的优先级更新标准，而并不是某一个具体的组件，这时我们的需求是需要把 任务B 从 一批任务 中分离出来，先处理 "),s("code",[t._v("cpu")]),t._v(" 任务 A 和 C ，如果通过 "),s("code",[t._v("expirationTime")]),t._v(" 实现呢，是比较困难的，它很难表示批的概念，也很难从一批任务里抽离单个任务，这时呢，我们就需要一种更细粒度的优先级。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/34dd5cc5d42443ad9e7818420effc8b2_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("于是呢，"),s("code",[t._v("Lanes")]),t._v(" 就出现了。以前使用 "),s("code",[t._v("expirationTime")]),t._v(" 表示的字段，都改为了 "),s("code",[t._v("lane")]),t._v("。比如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expirationTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lane\nfiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expirationTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lanes\n")])])]),s("p",[s("code",[t._v("Lane")]),t._v(" 和 "),s("code",[t._v("Lanes")]),t._v(" 就是单数和复数的关系, 代表单个任务的定义为 "),s("code",[t._v("Lane")]),t._v(" ，代表多个任务的定义为 "),s("code",[t._v("Lanes")]),t._v(" 。")]),t._v(" "),s("p",[s("code",[t._v("Lane")]),t._v(" 的类型，被定义为二进制变量，这样，我们在做优先级计算的时候，用的都是位运算，在频繁更新的时候呢，占用内存少，计算速度也更快。")]),t._v(" "),s("p",[t._v("React 一共定义了18 种 "),s("code",[t._v("Lane/Lanes")]),t._v(" 变量 ，每一个变量占有 1 个或多个比特位，每一种 "),s("code",[t._v("Lane/Lanes")]),t._v(" 都有对应的优先级。")]),t._v(" "),s("p",[t._v("在代码中我们可以发现，越低优先级的 "),s("code",[t._v("lanes")]),t._v(" 占用的位越多。比如 "),s("code",[t._v("InputDiscreteLanes")]),t._v("（也就是离散用交互的优先级）占了2个位，"),s("code",[t._v("TransitionLanes")]),t._v(" 占了9个位。原因在于：越低优先级的更新越容易被打断（如果当前优先级的所有赛道都被占有了，则把当前优先级下降一个优先级），导致积压下来，所以需要更多的位。相反，最高优的同步更新的 "),s("code",[t._v("SyncLane")]),t._v(" 不需要多余的 "),s("code",[t._v("lanes")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"react-18-更灵活-concurrent-renderring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-18-更灵活-concurrent-renderring"}},[t._v("#")]),t._v(" React 18 - 更灵活 Concurrent Renderring")]),t._v(" "),s("p",[t._v("就在前段时间， "),s("code",[t._v("React")]),t._v(" 发布了 18 的 Alpha 版本，由于 "),s("code",[t._v("Concurrent Mode")]),t._v(" 带来的巨大的 Break Change ，"),s("code",[t._v("React")]),t._v(" 还不能默认开启它。所以，"),s("code",[t._v("React")]),t._v(" 干脆换了个名字，叫 "),s("code",[t._v("Concurrent Rendering")]),t._v(" 并发渲染机制。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("React 17")]),t._v(" 版本里，React 已经支持了多版本共存，所以 React 推荐大家渐进式升级，而不是一刀切。只有由这些 新特性触发的更新会启用并发渲染，所以大家不需要改动很多代码也可以直接使用 "),s("code",[t._v("React 18")]),t._v("，可以根据自己的节奏去尝试这些新特性。")]),t._v(" "),s("h3",{attrs:{id:"createroot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#createroot"}},[t._v("#")]),t._v(" createRoot")]),t._v(" "),s("p",[s("code",[t._v("React")]),t._v(" 给我们提供了三种模式，之前我们一直使用的 "),s("code",[t._v("ReactDOM.render")]),t._v(" 创建的应用属于 "),s("code",[t._v("legacy")]),t._v(" ，在这个模式下更新还是同步的，一次 "),s("code",[t._v("render")]),t._v(" 阶段对应一次 "),s("code",[t._v("commit")]),t._v(" 阶段。")]),t._v(" "),s("p",[t._v("如果使用 "),s("code",[t._v("ReactDOM.createRoot")]),t._v(" 创建的应用，就默认开启了并发渲染，可以看到 在 "),s("code",[t._v("React 18")]),t._v(" ，"),s("code",[t._v("createRoot")]),t._v(" 这个函数已经不再是 "),s("code",[t._v("unstable")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ReactDOM "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-dom'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" App "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./App'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" container "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create a root.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRoot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Render the top component to the root.")]),t._v("\nroot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("App")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("另外，还有个通过 "),s("code",[t._v("createBlockingRoot")]),t._v(" 函数创建的 "),s("code",[t._v("blocking")]),t._v(" 模式，这个函数是方便我们进行上面两种模式的过渡。")]),t._v(" "),s("p",[t._v("在下面，我们也可以看到不同模式支持的特性对比。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/86695189e31248a690d5bb1894c92437_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"批处理的优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#批处理的优化"}},[t._v("#")]),t._v(" 批处理的优化")]),t._v(" "),s("p",[t._v("上面我们提到了，在 "),s("code",[t._v("React 15")]),t._v(" 中，"),s("code",[t._v("React")]),t._v(" 实现了第一版的批处理机制。如果我们在一次事件回调中触发多次更新，他们会被合并为一次更新进行处理。")]),t._v(" "),s("p",[t._v("主要的原因是 "),s("code",[t._v("batchedUpdates")]),t._v(" 这个函数本身是同步调用的，如果 "),s("code",[t._v("fn")]),t._v(" 内部有异步执行，这时批处理早已执行完，所以这个版本的批处理无法处理异步函数。")]),t._v(" "),s("p",[t._v("但是，在 "),s("code",[t._v("React")]),t._v(" 里我们有大量的状态更新要在异步回调里去做，那么在 "),s("code",[t._v("React 18")]),t._v(" 呢，如果开启了异步渲染，就可以解决这个问题。")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidMount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在 "),s("code",[t._v("Concurrent")]),t._v(" 模式下，是以优先级为依据对更新进行合并的。")]),t._v(" "),s("p",[t._v("我们可以看到，之前我们的这段代码最终的输出已经变成了 "),s("code",[t._v("0、0、1、1")]),t._v(" ，为啥是这样的输出呢？下面我们简单看下基于优先级的批处理是怎么样的：")]),t._v(" "),s("p",[t._v("在组件对应 "),s("code",[t._v("fiber")]),t._v(" 挂载 "),s("code",[t._v("update")]),t._v(" 后，就会进入「调度流程」。上面我们也讲到了 "),s("code",[t._v("Scheduler")]),t._v(" 调度的作用就是，选出不同优先级的 "),s("code",[t._v("update")]),t._v(" 中优先级最高的那个，以该优先级进入更新流程。进入调度后的流程大概如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/8f7842f48340415b99cdf485eb0bbc1b_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("首先我们取出当前所有优先级中最高优先级的 "),s("code",[t._v("Lane")]),t._v("，然后根据 "),s("code",[t._v("Lane")]),t._v(" 获取本次需要调度的优先级。")]),t._v(" "),s("p",[t._v("然后我们需要获取在执行正式更新流程之前，是否之前存在一个调度，如果存在的话，和本次调度的优先级进行对比。")]),t._v(" "),s("p",[t._v("如果是第一次执行 "),s("code",[t._v("setState")]),t._v(" ，这个 "),s("code",[t._v("existingCallbackPriority")]),t._v(" 肯定是不存在的，所以第一次出发会将 更新流程 "),s("code",[t._v("performConcurrentWorkOnRoot")]),t._v(" 通过 "),s("code",[t._v("scheduleCallback")]),t._v(" 进行调度。")]),t._v(" "),s("p",[t._v("但是第二次 "),s("code",[t._v("setState")]),t._v(" 进来，由于之前已经有了一次调度了，而且和本地的优先级是一致的，就会直接 "),s("code",[t._v("return")]),t._v("，不再调用 "),s("code",[t._v("scheduleCallback")]),t._v(" 对 "),s("code",[t._v("performConcurrentWorkOnRoot")]),t._v(" 进行调度。")]),t._v(" "),s("p",[t._v("那么，一定时间过后，前面所有同一优先级的更新就会一起进入正式的更新流程。由于后面的 "),s("code",[t._v("setState")]),t._v(" 是在 "),s("code",[t._v("setTimeout")]),t._v(" 中调用的，"),s("code",[t._v("setTimeout")]),t._v(" 具有较低的优先级，所有会放到下一个批次执行，所以，最终打印的结果是 "),s("code",[t._v("0、0、1、1")]),t._v("。")]),t._v(" "),s("p",[t._v("以上，就是基于优先级的自动批处理的流程。有了这样的流程，我们就不需要之前 "),s("code",[t._v("React")]),t._v(" 给我们提供的 "),s("code",[t._v("unstable_batchedUpdates")]),t._v(" 这样手动批处理的函数了。")]),t._v(" "),s("h3",{attrs:{id:"starttransition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#starttransition"}},[t._v("#")]),t._v(" startTransition")]),t._v(" "),s("p",[t._v("下面，我们来看看 "),s("code",[t._v("React 18")]),t._v(" 新增的一个 API："),s("code",[t._v("startTransition")]),t._v("：")]),t._v(" "),s("p",[t._v("这个 "),s("code",[t._v("API")]),t._v(" 可以让我们手动区分非紧急的状态更新，本质上还是对组件渲染优先级的控制。比如现在有这样一个场景：我们要去 "),s("code",[t._v("Input")]),t._v(" 框输入一个值，然后下面需要同时给出通过我们输入后的值过滤出来的一些数据。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/405b1e898a4645c5a17d3ec41f5f3d1b_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("因为你每次需要动态渲染出过滤后的值，所以你可能会将输入的值存储在一个 "),s("code",[t._v("state")]),t._v(" 中，你的代码可能是下面这样的：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInputValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setSearchQuery")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("首先用户输入上去的值肯定是需要立刻渲染出来的，但是过滤出来的联想数据可能不需要那么快的渲染，如果我们不做任何额外的处理，在 "),s("code",[t._v("React 18")]),t._v(" 之前，所有更新都会立刻被渲染，如果你的原始数据非常多，那么每次输入新的值后你需要进行的计算量（根据输入的值过滤出符合条件的数据）就非常大，所以每次用户输入后可能会有卡顿现象。")]),t._v(" "),s("p",[t._v("所以，在以前我们可能会自己去加一些防抖这样的操作去人为的延迟过滤数据的计算和渲染。")]),t._v(" "),s("p",[t._v("新的 "),s("code",[t._v("startTransition API")]),t._v(" 可以让我们把数据标记成 "),s("code",[t._v("transitions")]),t._v(" 状态。")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" startTransition "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Urgent: Show what was typed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInputValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Mark any state updates inside as transitions")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("startTransition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Transition: Show the results")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setSearchQuery")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("所有在 "),s("code",[t._v("startTransition")]),t._v(" 回调中的更新都会被认为是 非紧急处理，如果出现更紧急的更新（比如用户又输入了新的值），则上面的更新都会被中断，直到没有其他紧急操作之后才会去继续执行更新。")]),t._v(" "),s("p",[t._v("同时，"),s("code",[t._v("React")]),t._v(" 还给我们提供了一个带有 "),s("code",[t._v("isPending")]),t._v(" 过渡标志的 Hook：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" useTransition "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("isPending"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" startTransition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useTransition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("你可以使用它和一些 "),s("code",[t._v("loading")]),t._v(" 动画结合使用：")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" isPending "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Spinner")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("下面，还有一个更典型的例子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/c60e80a17cac4e068fa9504232729564_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("拖动左边滑块会改变树渲染的节点数量。拖动顶部滑块会改变树的倾斜角度。最顶上有个帧雷达，可以实时显示更新过程中的掉帧情况。当不点击 "),s("code",[t._v("Use startTransition")]),t._v(" 按钮，拖动顶上的滑块。可以看到：拖动并不流畅，顶上的帧雷达显示掉帧。")]),t._v(" "),s("p",[t._v("这时，我们把 "),s("code",[t._v("tree")]),t._v(" 的 "),s("code",[t._v("render")]),t._v(" 放到 "),s("code",[t._v("startTransition")]),t._v(" 中，虽然 "),s("code",[t._v("tree")]),t._v(" 的更新还是很卡顿，但是雷达不会掉帧了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/2109bca777b446c79bb148efabe32355_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("startTransition")]),t._v(" 的实现其实也很简单，所有 在 "),s("code",[t._v("startTransition")]),t._v(" 回调中执行的操作都会拿到一个 "),s("code",[t._v("isTransition")]),t._v(" 标记，根据这个标记， React 会把更新赋予更低的优先级。")]),t._v(" "),s("h3",{attrs:{id:"usedeferredvalue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usedeferredvalue"}},[t._v("#")]),t._v(" useDeferredValue")]),t._v(" "),s("p",[t._v("除了手动标记某些操作的优先级，我们还能去标记某个具体状态的优先级。"),s("code",[t._v("React 18")]),t._v(" 给我们提供了一个新的 "),s("code",[t._v("Hook useDeferredValue")]),t._v(" 。")]),t._v(" "),s("p",[t._v("比如我们现在有这样的场景，用户输入了一些信息后，我们需要对这些信息做一些处理然后渲染到下面的详情里，如果这个处理比较耗时，那么连续的用户输入会有卡顿的感觉。我们可以看图中这个例子，实际上所有的输入都是连续输入的。")]),t._v(" "),s("p",[t._v("实际上，我们希望的是用户的输入能得到快速的响应，但是下面详情的渲染多等待一会其实无所谓。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/b0f42b7cb9364f71a2addc878b589a03_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("这时，我们可以通过 "),s("code",[t._v("useDeferredValue")]),t._v(" 创建一个 "),s("code",[t._v("deferredText")]),t._v("，真正的意思是 "),s("code",[t._v("deferredText")]),t._v(" 的渲染被标记为了低优先级，它还有另一个参数，这个渲染的最大延迟时间。我们可以大概猜测到，"),s("code",[t._v("useDeferredValue")]),t._v(" 的实现机制应该和 "),s("code",[t._v("expairedTime")]),t._v(" 是类似的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/ddcf2eb122a44406a4eb669955275ad0_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("在图中我们可以看到 ，用户输入已经不会有卡顿的感觉了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/notes/assets/performance/react/36910231dd864e5ab669ec2246532b3f_tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),t._v(" "),s("p",[t._v("那么它跟我们手动实现的防抖有啥区别呢？")]),t._v(" "),s("p",[t._v("防抖的主要问题是，不管我们的电脑渲染的有多快，它都会有一个固定的延迟，而 "),s("code",[t._v("useDeferredValue")]),t._v(" 呢，只会在渲染比较耗时的情况下把优先级滞后，在多数情况下是不会有不必要的延迟的。")]),t._v(" "),s("h3",{attrs:{id:"ssr-下的懒加载支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssr-下的懒加载支持"}},[t._v("#")]),t._v(" SSR 下的懒加载支持")]),t._v(" "),s("p",[t._v("最后呢，就是 "),s("code",[t._v("Suspense")]),t._v(" 了，在 React 18 以前， SSR 模式下是不支持使用 "),s("code",[t._v("Suspense")]),t._v(" 组件的，而在 React 18 中，服务端渲染的组件也支持使用 "),s("code",[t._v("<Suspense>")]),t._v(" 了：如果你把组件包裹在了"),s("code",[t._v("<Suspense>")]),t._v("中，服务端首先会把 "),s("code",[t._v("fallback")]),t._v(" 中的组件作为 "),s("code",[t._v("HTML")]),t._v(" 流式传输，一旦主组件加载完成，"),s("code",[t._v("React")]),t._v(" 会发送新的 "),s("code",[t._v("HTML")]),t._v(" 来替换整个组件。")]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Layout")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v(" \n< Article /> \n")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Suspense")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("fallback")]),s("span",{pre:!0,attrs:{class:"token script language-javascript"}},[s("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Spinner")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n   ")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comments")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v(" \n")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Suspense")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Layout")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("比如上面的代码，"),s("code",[t._v("<Article>")]),t._v(" 组件首先会被渲染，"),s("code",[t._v("<Comments>")]),t._v(" 组件将被 "),s("code",[t._v("fallback")]),t._v(" 替换为 "),s("code",[t._v("<Spinner>")]),t._v(" 。一旦 "),s("code",[t._v("<Comments>")]),t._v(" 组件加载完成后，"),s("code",[t._v("React")]),t._v(" 会才将其发送到浏览器，替换 "),s("code",[t._v("<Spinner>")]),t._v(" 组件。")])])}),[],!1,null,null,null);a.default=n.exports}}]);