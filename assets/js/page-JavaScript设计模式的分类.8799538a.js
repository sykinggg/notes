(window.webpackJsonp=window.webpackJsonp||[]).push([[227],{686:function(t,v,_){"use strict";_.r(v);var r=_(1),a=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"javascript-设计模式的分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript-设计模式的分类"}},[t._v("#")]),t._v(" JavaScript 设计模式的分类")]),t._v(" "),_("h2",{attrs:{id:"设计原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计原则"}},[t._v("#")]),t._v(" 设计原则")]),t._v(" "),_("h3",{attrs:{id:"单一职责原则-srp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则-srp"}},[t._v("#")]),t._v(" 单一职责原则（SRP）")]),t._v(" "),_("p",[t._v("一个对象或方法只做一件事情。如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大。")]),t._v(" "),_("p",[t._v("应该把对象或方法划分成较小的粒度")]),t._v(" "),_("h3",{attrs:{id:"最少知识原则-lkp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最少知识原则-lkp"}},[t._v("#")]),t._v(" 最少知识原则（LKP）")]),t._v(" "),_("p",[t._v("一个软件实体应当 尽可能少地与其他实体发生相互作用")]),t._v(" "),_("p",[t._v("应当尽量减少对象之间的交互。如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的 相互联系，可以转交给第三方进行处理")]),t._v(" "),_("h3",{attrs:{id:"开放-封闭原则-ocp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#开放-封闭原则-ocp"}},[t._v("#")]),t._v(" 开放-封闭原则（OCP）")]),t._v(" "),_("p",[t._v("软件实体（类、模块、函数）等应该是可以 扩展的，但是不可修改")]),t._v(" "),_("p",[t._v("当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，尽量避免改动程序的源代码，防止影响原系统的稳定")]),t._v(" "),_("h2",{attrs:{id:"创建型设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建型设计模式"}},[t._v("#")]),t._v(" 创建型设计模式")]),t._v(" "),_("blockquote",[_("p",[t._v("创建型设计模式关注于对象创建的机制方法，通过该方法,对象以适应工作环境的方式被创建。基本的对象创建方法可能会给项目增加额外的复杂性，而这些模式的目的就是为了通过控制创建过程解决这个问题。")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("构造器模式（Constructor）")])]),t._v(" "),_("li",[_("p",[t._v("工厂模式（Factory）")])]),t._v(" "),_("li",[_("p",[t._v("抽象工厂模式 （Abstract）")])]),t._v(" "),_("li",[_("p",[t._v("原型模式 （Prototype）")])]),t._v(" "),_("li",[_("p",[t._v("单例模式 （Singleton）")])]),t._v(" "),_("li",[_("p",[t._v("建造者模式（Builder）")])])]),t._v(" "),_("h2",{attrs:{id:"结构设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结构设计模式"}},[t._v("#")]),t._v(" 结构设计模式")]),t._v(" "),_("blockquote",[_("p",[t._v("结构模式关注于对象组成和通常识别的方式实现不同对象之间的关系。该模式有助于在系统的某一部分发生改变的时候，整个系统结构不需要改变。该模式同样有助于对系统中某部分没有达到某一目的的部分进行重组。")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("装饰模式")])]),t._v(" "),_("li",[_("p",[t._v("外观模式")])]),t._v(" "),_("li",[_("p",[t._v("享元模式")])]),t._v(" "),_("li",[_("p",[t._v("适配器模式")])]),t._v(" "),_("li",[_("p",[t._v("代理模式")])])]),t._v(" "),_("h2",{attrs:{id:"行为设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#行为设计模式"}},[t._v("#")]),t._v(" 行为设计模式")]),t._v(" "),_("blockquote",[_("p",[t._v("行为模式关注改善或精简在系统中不同对象间通信。")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("迭代模式")])]),t._v(" "),_("li",[_("p",[t._v("中介者模式")])]),t._v(" "),_("li",[_("p",[t._v("观察者模式")])]),t._v(" "),_("li",[_("p",[t._v("访问者模式")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("SN")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Creational")]),t._v(" "),_("td",[t._v("根据创建对象的概念分成下面几类")])]),t._v(" "),_("tr",[_("td",[t._v("Class")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("Factory Method(工厂方法)")]),t._v(" "),_("td",[t._v("通过将数据和事件接口化来构建若干个子类。")])]),t._v(" "),_("tr",[_("td",[t._v("Object")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("Abstract Factory(抽象工厂)")]),t._v(" "),_("td",[t._v("建立若干族类的一个实例，这个实例不需要具体类的细节信息。（抽象类）")])]),t._v(" "),_("tr",[_("td",[t._v("Builder (建造者)")]),t._v(" "),_("td",[t._v("将对象的构建方法和其表现形式分离开来，总是构建相同类型的对象。")])]),t._v(" "),_("tr",[_("td",[t._v("Prototype(原型)")]),t._v(" "),_("td",[t._v("一个完全初始化的实例，用于拷贝或者克隆。")])]),t._v(" "),_("tr",[_("td",[t._v("Singleton(单例)")]),t._v(" "),_("td",[t._v("一个类只有唯一的一个实例，这个实例在整个程序中有一个全局的访问点。")])]),t._v(" "),_("tr",[_("td",[t._v("Structural")]),t._v(" "),_("td",[t._v("根据构建对象块的方法分成下面几类。")])]),t._v(" "),_("tr",[_("td",[t._v("Class")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("Adapter(适配器)")]),t._v(" "),_("td",[t._v("将不同类的接口进行匹配，调整，这样尽管内部接口不兼容但是不同的类还是可以协同工作的。")])]),t._v(" "),_("tr",[_("td",[t._v("Bridge(桥接模式)")]),t._v(" "),_("td",[t._v("将对象的接口从其实现中分离出来，这样对象的实现和接口可以独立的变化。")])]),t._v(" "),_("tr",[_("td",[t._v("Composite(组合模式)")]),t._v(" "),_("td",[t._v("通过将简单可组合的对象组合起来，构成一个完整的对象，这个对象的能力将会超过这些组成部分的能力的总和，即会有新的能力产生。")])]),t._v(" "),_("tr",[_("td",[t._v("Decorator(装饰器)")]),t._v(" "),_("td",[t._v("动态给对象增加一些可替换的处理流程。")])]),t._v(" "),_("tr",[_("td",[t._v("Facada(外观模式)")]),t._v(" "),_("td",[t._v("一个类隐藏了内部子系统的复杂度，只暴露出一些简单的接口。")])]),t._v(" "),_("tr",[_("td",[t._v("Flyweight(享元模式)")]),t._v(" "),_("td",[t._v("一个细粒度对象，用于将包含在其它地方的信息 在不同对象之间高效地共享。")])]),t._v(" "),_("tr",[_("td",[t._v("Proxy(代理模式)")]),t._v(" "),_("td",[t._v("一个充当占位符的对象用来代表一个真实的对象。")])]),t._v(" "),_("tr",[_("td",[t._v("Behavioral")]),t._v(" "),_("td",[t._v("基于对象间作用方式来分类。")])]),t._v(" "),_("tr",[_("td",[t._v("Class")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("Interpreter(解释器)")]),t._v(" "),_("td",[t._v("将语言元素包含在一个应用中的一种方式，用于匹配目标语言的语法。")])]),t._v(" "),_("tr",[_("td",[t._v("Template Method(模板方法)")]),t._v(" "),_("td",[t._v("在一个方法中为某个算法建立一层外壳，将算法的具体步骤交付给子类去做。")])]),t._v(" "),_("tr",[_("td",[t._v("Object")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("Chain of Responsibility(响应链)")]),t._v(" "),_("td",[t._v("一种将请求在一串对象中传递的方式，寻找可以处理这个请求的对象。")])]),t._v(" "),_("tr",[_("td",[t._v("Command(命令)")]),t._v(" "),_("td",[t._v("封装命令请求为一个对象，从而使记录日志，队列缓存请求，未处理请求进行错误处理 这些功能称为可能。")])]),t._v(" "),_("tr",[_("td",[t._v("Iterator(迭代器)")]),t._v(" "),_("td",[t._v("在不需要直到集合内部工作原理的情况下，顺序访问一个集合里面的元素。")])]),t._v(" "),_("tr",[_("td",[t._v("Mediator(中介者模式)")]),t._v(" "),_("td",[t._v("在类之间定义简化的通信方式，用于避免类之间显式的持有彼此的引用。")])]),t._v(" "),_("tr",[_("td",[t._v("Observer(观察者模式)")]),t._v(" "),_("td",[t._v("用于将变化通知给多个类的方式，可以保证类之间的一致性。")])]),t._v(" "),_("tr",[_("td",[t._v("State(状态)")]),t._v(" "),_("td",[t._v("当对象状态改变时，改变对象的行为。")])]),t._v(" "),_("tr",[_("td",[t._v("Strategy(策略)")]),t._v(" "),_("td",[t._v("将算法封装到类中，将选择和实现分离开来。")])]),t._v(" "),_("tr",[_("td",[t._v("Visitor(访问者)")]),t._v(" "),_("td",[t._v("为类增加新的操作而不改变类本身。")])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);