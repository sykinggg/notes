(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{1112:function(t,s,e){"use strict";e.r(s);var a=e(1),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),e("h2",{attrs:{id:"描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("p",[t._v("一个 "),e("code",[t._v("Promise")]),t._v(" 对象代表一个在这个 "),e("code",[t._v("promise")]),t._v(" 被创建出来时不一定已知的值。它让您能够把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来。 这样使得异步方法可以像同步方法那样返回值：异步方法并不会立即返回最终的值，而是会返回一个 "),e("code",[t._v("promise")]),t._v("，以便在未来某个时候把值交给使用者。")]),t._v(" "),e("p",[t._v("一个 "),e("code",[t._v("Promise")]),t._v(" 必然处于以下几种状态之一：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("待定（"),e("code",[t._v("pending")]),t._v("）: 初始状态，既没有被兑现，也没有被拒绝。")])]),t._v(" "),e("li",[e("p",[t._v("已兑现（"),e("code",[t._v("fulfilled")]),t._v("）: 意味着操作成功完成。")])]),t._v(" "),e("li",[e("p",[t._v("已拒绝（"),e("code",[t._v("rejected")]),t._v("）: 意味着操作失败。")])])]),t._v(" "),e("p",[t._v("待定状态的 "),e("code",[t._v("Promise")]),t._v(" 对象要么会通过一个值被兑现（"),e("code",[t._v("fulfilled")]),t._v("），要么会通过一个原因（"),e("code",[t._v("错误")]),t._v("）被拒绝（"),e("code",[t._v("rejected")]),t._v("）。当这些情况之一发生时，用 "),e("code",[t._v("promise")]),t._v(" 的 "),e("code",[t._v("then")]),t._v(" 方法排列起来的相关处理程序就会被调用。如果 "),e("code",[t._v("promise")]),t._v(" 在一个相应的处理程序被绑定时就已经被兑现或被拒绝了，那么这个处理程序就会被调用，因此在完成异步操作和绑定处理方法之间不会存在竞争状态。")]),t._v(" "),e("p",[t._v("因为 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",target:"_blank",rel:"noopener noreferrer"}},[t._v("Promise.prototype.then"),e("OutboundLink")],1),t._v(" 和  "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch",target:"_blank",rel:"noopener noreferrer"}},[t._v("Promise.prototype.catch"),e("OutboundLink")],1),t._v(" 方法返回的是 "),e("code",[t._v("promise")]),t._v("， 所以它们可以被链式调用。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/notes/assets/promises.png",alt:"demo"}})]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("不要和惰性求值混淆：")]),t._v(' 有一些语言中有惰性求值和延时计算的特性，它们也被称为“promises”，例如 Scheme。JavaScript 中的 promise 代表的是已经正在发生的进程， 而且可以通过回调函数实现链式调用。 如果您想对一个表达式进行惰性求值，就考虑一下使用无参数的"箭头函数":  '),e("code",[t._v("f = () =>表达式")]),t._v(" 来创建惰性求值的表达式，使用 "),e("code",[t._v("f()")]),t._v(" 求值。")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("注意：")]),t._v(" 如果一个 "),e("code",[t._v("promise")]),t._v(" 已经被兑现（"),e("code",[t._v("fulfilled")]),t._v("）或被拒绝（"),e("code",[t._v("rejected")]),t._v("），那么也可以说它处于已敲定（"),e("code",[t._v("settled")]),t._v("）状态。您还会听到一个经常跟 "),e("code",[t._v("promise")]),t._v(" 一起使用的术语：已决议（"),e("code",[t._v("resolved")]),t._v("），它表示 "),e("code",[t._v("promise")]),t._v(" 已经处于已敲定("),e("code",[t._v("settled")]),t._v(")状态，或者为了匹配另一个 "),e("code",[t._v("promise")]),t._v(' 的状态被"锁定"了。Domenic Denicola 的 '),e("a",{attrs:{href:"https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("States and fates"),e("OutboundLink")],1),t._v(" 中有更多关于 promise 术语的细节可以供您参考。")])]),t._v(" "),e("h2",{attrs:{id:"promise的链式调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise的链式调用"}},[t._v("#")]),t._v(" Promise的链式调用")]),t._v(" "),e("p",[t._v("可以用 "),e("code",[t._v("promise.then()")]),t._v("，"),e("code",[t._v("promise.catch()")]),t._v(" 和 "),e("code",[t._v("promise.finally()")]),t._v(" 这些方法将进一步的操作与一个变为已敲定状态的 "),e("code",[t._v("promise")]),t._v(" 关联起来。这些方法还会返回一个新生成的 "),e("code",[t._v("promise")]),t._v(" 对象，这个对象可以被非强制性的用来做链式调用，就像这样：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myPromise "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myExecutorFunc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleFulfilledA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("handleRejectedA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleFulfilledB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("handleRejectedB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleFulfilledC"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("handleRejectedC"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者，这样可能会更好...")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myPromise "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myExecutorFunc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleFulfilledA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleFulfilledB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleFulfilledC"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleRejectedAny"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("过早地处理被拒绝的 "),e("code",[t._v("promise")]),t._v(" 会对之后 "),e("code",[t._v("promise")]),t._v(" 的链式调用造成影响。不过有时候因为需要马上处理一个错误也只能这样做。（有关应对影响的技巧，请参见下面示例中的 "),e("code",[t._v("throw -999")]),t._v(" ）另一方面，在没有迫切需要的情况下，可以在最后一个.catch() 语句时再进行错误处理，这种做法更加简单。")]),t._v(" "),e("p",[t._v('这两个函数的签名很简单，它们只接受一个任意类型的参数。这些函数由您（编程者）编写。这些函数的终止状态决定着链式调用中下一个promise的"已敲定 （'),e("code",[t._v("settled")]),t._v('）"状态是什么。任何不是 '),e("code",[t._v("throw")]),t._v(' 的终止都会创建一个"已决议（'),e("code",[t._v("resolved")]),t._v('）"状态，而以 '),e("code",[t._v("throw")]),t._v(' 终止则会创建一个"已拒绝"状态。')]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleFulfilled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nextValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleRejection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reason")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v("  nextReason"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleRejection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reason")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nextValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("被返回的 "),e("code",[t._v("nextValue")]),t._v(" 可能是另一个"),e("code",[t._v("promise")]),t._v("对象，这种情况下这个"),e("code",[t._v("promise")]),t._v("会被动态地插入链式调用。")]),t._v(" "),e("p",[t._v("当 "),e("code",[t._v(".then()")]),t._v(" 中缺少能够返回 "),e("code",[t._v("promise")]),t._v(" 对象的函数时，链式调用就直接继续进行下一环操作。因此，链式调用可以在最后一个 "),e("code",[t._v(".catch()")]),t._v(" 之前把所有的 "),e("code",[t._v("handleRejection")]),t._v(" 都省略掉。类似地， "),e("code",[t._v(".catch()")]),t._v(" 其实只是没有给 "),e("code",[t._v("handleFulfilled")]),t._v(" 预留参数位置的 "),e("code",[t._v(".then()")]),t._v(" 而已。")]),t._v(" "),e("p",[t._v("链式调用中的 "),e("code",[t._v("promise")]),t._v(" 们就像俄罗斯套娃一样，是嵌套起来的，但又像是一个栈，每个都必须从顶端被弹出。链式调用中的第一个 "),e("code",[t._v("promise")]),t._v(" 是嵌套最深的一个，也将是第一个被弹出的。")]),t._v(" "),e("blockquote",[e("p",[t._v("(promise D, (promise C, (promise B, (promise A) ) ) )")])]),t._v(" "),e("p",[t._v("当存在一个 "),e("code",[t._v("nextValue")]),t._v(" 是 "),e("code",[t._v("promise")]),t._v(" 时，就会出现一种动态的替换效果。"),e("code",[t._v("return")]),t._v(" 会导致一个 "),e("code",[t._v("promise")]),t._v(" 被弹出，但这个 "),e("code",[t._v("nextValue")]),t._v(" promise 则会被推入被弹出 "),e("code",[t._v("promise")]),t._v(' 原来的位置。对于上面所示的嵌套场景，假设与 "promise B" 相关的 '),e("code",[t._v(".then()")]),t._v(' 返回了一个值为 "promise X" 的 '),e("code",[t._v("nextValue")]),t._v(" 。那么嵌套的结果看起来就会是这样：")]),t._v(" "),e("blockquote",[e("p",[t._v("(promise D, (promise C, (promise X) ) )")])]),t._v(" "),e("p",[t._v("一个 "),e("code",[t._v("promise")]),t._v(" 可能会参与不止一次的嵌套。对于下面的代码，"),e("code",[t._v("promiseA")]),t._v(' 向"已敲定"（"'),e("code",[t._v("settled")]),t._v('"）状态的过渡会导致两个实例的 '),e("code",[t._v(".then")]),t._v(" 都被调用。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" promiseA "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myExecutorFunc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" promiseB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" promiseA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleFulfilled1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handleRejected1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" promiseC "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" promiseA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleFulfilled2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handleRejected2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),e("p",[t._v('一个已经处于"已敲定"（"'),e("code",[t._v("settled")]),t._v('"）状态的 '),e("code",[t._v("promise")]),t._v(" 也可以接收操作。在那种情况下，（如果没有问题的话，）这个操作会被作为第一个异步操作被执行。注意，所有的 "),e("code",[t._v("promise")]),t._v(' 都一定是异步的。因此，一个已经处于"已敲定"（"'),e("code",[t._v("settled")]),t._v('"）状态的 '),e("code",[t._v("promise")]),t._v(" 中的操作只有 "),e("code",[t._v("promise")]),t._v(" 链式调用的栈被清空了和一个事件循环过去了之后才会被执行。这种效果跟 "),e("code",[t._v("setTimeout(action, 10)")]),t._v(" 特别相似。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" promiseA "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolutionFunc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rejectionFunc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolutionFunc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("777")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 这时，"promiseA" 已经被敲定了。')]),t._v("\npromiseA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"asynchronous logging has val:"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("val"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"immediate logging"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// produces output in this order:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// immediate logging")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// asynchronous logging has val: 777")]),t._v("\n")])])]),e("h2",{attrs:{id:"构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise()")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("创建一个新的 "),e("code",[t._v("Promise")]),t._v(" 对象。该构造函数主要用于包装还没有添加 "),e("code",[t._v("promise")]),t._v(" 支持的函数。")]),t._v(" "),e("h2",{attrs:{id:"静态方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise.all(iterable)")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("这个方法返回一个新的"),e("code",[t._v("promise")]),t._v("对象，该"),e("code",[t._v("promise")]),t._v("对象在"),e("code",[t._v("iterable")]),t._v("参数对象里所有的"),e("code",[t._v("promise")]),t._v("对象都成功的时候才会触发成功，一旦有任何一个"),e("code",[t._v("iterable")]),t._v("里面的"),e("code",[t._v("promise")]),t._v("对象失败则立即触发该"),e("code",[t._v("promise")]),t._v("对象的失败。这个新的"),e("code",[t._v("promise")]),t._v("对象在触发成功状态以后，会把一个包含"),e("code",[t._v("iterable")]),t._v("里所有"),e("code",[t._v("promise")]),t._v("返回值的数组作为成功回调的返回值，顺序跟"),e("code",[t._v("iterable")]),t._v("的顺序保持一致；如果这个新的"),e("code",[t._v("promise")]),t._v("对象触发了失败状态，它会把"),e("code",[t._v("iterable")]),t._v("里第一个触发失败的"),e("code",[t._v("promise")]),t._v("对象的错误信息作为它的失败错误信息。"),e("code",[t._v("Promise.all")]),t._v("方法常被用于处理多个"),e("code",[t._v("promise")]),t._v("对象的状态集合。（可以参考"),e("code",[t._v("jQuery.when")]),t._v("方法---译者注）")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise.allSettled(iterable)")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("等到所有"),e("code",[t._v("promises")]),t._v("都已敲定（"),e("code",[t._v("settled")]),t._v("）（每个"),e("code",[t._v("promise")]),t._v("都已兑现（"),e("code",[t._v("fulfilled")]),t._v("）或已拒绝（"),e("code",[t._v("rejected")]),t._v("））。\n返回一个"),e("code",[t._v("promise")]),t._v("，该"),e("code",[t._v("promise")]),t._v("在所有"),e("code",[t._v("promise")]),t._v("完成后完成。并带有一个对象数组，每个对象对应每个"),e("code",[t._v("promise")]),t._v("的结果。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise.any(iterable)")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("接收一个"),e("code",[t._v("Promise")]),t._v("对象的集合，当其中的一个 "),e("code",[t._v("promise")]),t._v(" 成功，就返回那个成功的"),e("code",[t._v("promise")]),t._v("的值。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise.race(iterable)")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("当"),e("code",[t._v("iterable")]),t._v("参数里的任意一个子"),e("code",[t._v("promise")]),t._v("被成功或失败后，父"),e("code",[t._v("promise")]),t._v("马上也会用子"),e("code",[t._v("promise")]),t._v("的成功返回值或失败详情作为参数调用父"),e("code",[t._v("promise")]),t._v("绑定的相应句柄，并返回该"),e("code",[t._v("promise")]),t._v("对象。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise.reject(reason)")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("返回一个状态为失败的"),e("code",[t._v("Promise")]),t._v("对象，并将给定的失败信息传递给对应的处理方法")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise.resolve(value)")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("返回一个状态由给定"),e("code",[t._v("value")]),t._v("决定的"),e("code",[t._v("Promise")]),t._v("对象。如果该值是"),e("code",[t._v("thenable")]),t._v("(即，带有"),e("code",[t._v("then")]),t._v("方法的对象)，返回的"),e("code",[t._v("Promise")]),t._v("对象的最终状态由"),e("code",[t._v("then")]),t._v("方法执行决定；否则的话(该"),e("code",[t._v("value")]),t._v("为空，基本类型或者不带"),e("code",[t._v("then")]),t._v("方法的对象),返回的"),e("code",[t._v("Promise")]),t._v("对象状态为"),e("code",[t._v("fulfilled")]),t._v("，并且将该"),e("code",[t._v("value")]),t._v("传递给对应的"),e("code",[t._v("then")]),t._v("方法。通常而言，如果您不知道一个值是否是"),e("code",[t._v("Promise")]),t._v("对象，使用"),e("code",[t._v("Promise.resolve(value)")]),t._v(" 来返回一个"),e("code",[t._v("Promise")]),t._v("对象,这样就能将该"),e("code",[t._v("value")]),t._v("以"),e("code",[t._v("Promise")]),t._v("对象形式使用。")]),t._v(" "),e("h1",{attrs:{id:"promise-原型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-原型"}},[t._v("#")]),t._v(" Promise 原型")]),t._v(" "),e("h2",{attrs:{id:"属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),e("p",[e("code",[t._v("Promise.prototype.constructor")])]),t._v(" "),e("p",[t._v("返回被创建的实例函数.  默认为 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"}},[t._v("Promise"),e("OutboundLink")],1),t._v(" 函数.")]),t._v(" "),e("h2",{attrs:{id:"方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise.prototype.catch(onRejected)")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("添加一个拒绝("),e("code",[t._v("rejection")]),t._v(") 回调到当前 "),e("code",[t._v("promise")]),t._v(", 返回一个新的"),e("code",[t._v("promise")]),t._v("。当这个回调函数被调用，新 "),e("code",[t._v("promise")]),t._v(" 将以它的返回值来"),e("code",[t._v("resolve")]),t._v("，否则如果当前"),e("code",[t._v("promise")]),t._v(" 进入"),e("code",[t._v("fulfilled")]),t._v("状态，则以当前"),e("code",[t._v("promise")]),t._v("的完成结果作为新"),e("code",[t._v("promise")]),t._v("的完成结果.")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise.prototype.then(onFulfilled, onRejected)")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("添加解决("),e("code",[t._v("fulfillment")]),t._v(")和拒绝("),e("code",[t._v("rejection")]),t._v(")回调到当前 "),e("code",[t._v("promise")]),t._v(", 返回一个新的 "),e("code",[t._v("promise")]),t._v(", 将以回调的返回值来"),e("code",[t._v("resolve")]),t._v(".")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Promise.prototype.finally(onFinally)")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("添加一个事件处理回调于当前"),e("code",[t._v("promise")]),t._v("对象，并且在原"),e("code",[t._v("promise")]),t._v("对象解析完毕后，返回一个新的"),e("code",[t._v("promise")]),t._v("对象。回调会在当前"),e("code",[t._v("promise")]),t._v("运行完毕后被调用，无论当前"),e("code",[t._v("promise")]),t._v("的状态是完成("),e("code",[t._v("fulfilled")]),t._v(")还是失败("),e("code",[t._v("rejected")]),t._v(")")]),t._v(" "),e("h1",{attrs:{id:"创建promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建promise"}},[t._v("#")]),t._v(" 创建Promise")]),t._v(" "),e("p",[e("code",[t._v("Promise")]),t._v(" 对象是由关键字 "),e("code",[t._v("new")]),t._v(" 及其构造函数来创建的。该构造函数会把一个叫做“处理器函数”（"),e("code",[t._v("executor function")]),t._v("）的函数作为它的参数。这个“处理器函数”接受两个函数——"),e("code",[t._v("resolve")]),t._v(" 和 "),e("code",[t._v("reject")]),t._v(" ——作为其参数。当异步任务顺利完成且返回结果值时，会调用 "),e("code",[t._v("resolve")]),t._v(" "),e("code",[t._v("函数；而当异步任务失败且返回失败原因（通常是一个错误对象）时，会调用reject")]),t._v(" 函数。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myFirstPromise "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?做一些异步操作，最终会调用下面两者之一:")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   resolve(someValue); // fulfilled")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?或")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   reject("failure reason"); // rejected')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("想要某个函数拥有"),e("code",[t._v("promise")]),t._v("功能，只需让其返回一个"),e("code",[t._v("promise")]),t._v("即可。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("myAsyncFunction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" xhr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    xhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    xhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onload")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    xhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onerror")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusText"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    xhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h1",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("h2",{attrs:{id:"基础示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础示例"}},[t._v("#")]),t._v(" 基础示例")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myFirstPromise "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当异步代码执行成功时，才会调用resolve(...), 当异步代码失败时就会调用reject(...)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在本例中，使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"成功!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码正常执行！")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("250")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmyFirstPromise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("successMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//successMessage的值是上面调用resolve(...)方法传入的值.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//successMessage参数不一定非要是字符串类型，这里只是举个例子")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yay! "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" successMessage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"高级示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高级示例"}},[t._v("#")]),t._v(" 高级示例")]),t._v(" "),e("p",[t._v("本例展示了 "),e("code",[t._v("Promise")]),t._v(" 的一些机制。 "),e("code",[t._v("testPromise()")]),t._v(" 方法在每次点击 "),e("code",[t._v("<button>")]),t._v(" 按钮时被调用，该方法会创建一个"),e("code",[t._v("promise")]),t._v(" 对象，使用 "),e("code",[t._v("window.setTimeout()")]),t._v(" 让"),e("code",[t._v("Promise")]),t._v("等待 1-3 秒不等的时间来填充数据（通过"),e("code",[t._v("Math.random()")]),t._v("方法）。")]),t._v(" "),e("p",[e("code",[t._v("Promise")]),t._v(" 的值的填充过程都被日志记录（"),e("code",[t._v("logged")]),t._v("）下来，这些日志信息展示了方法中的同步代码和异步代码是如何通过"),e("code",[t._v("Promise")]),t._v("完成解耦的。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'use strict'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" promiseCount "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("testPromise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thisPromiseCount "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("promiseCount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" log "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'log'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentHTML")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforeend'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisPromiseCount "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("') 开始 (<small>同步代码开始</small>)<br/>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新构建一个 Promise 实例：使用Promise实现每过一段时间给计数器加一的过程，每段时间间隔为1~3秒不等")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// resolver 函数在 Promise 成功或失败时都可能被调用")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentHTML")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforeend'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisPromiseCount "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("') Promise 开始 (<small>异步代码开始</small>)<br/>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个异步调用")]),t._v("\n            window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 填充 Promise")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thisPromiseCount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Math"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Promise 不论成功或失败都会调用 then")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// catch() 只有当 promise 失败时才会调用")]),t._v("\n    p1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录填充值")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentHTML")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforeend'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("') Promise 已填充完毕 (<small>异步代码结束</small>)<br/>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录失败原因")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reason")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'处理失败的 promise ('")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("reason"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("')'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertAdjacentHTML")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforeend'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisPromiseCount "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("') Promise made (<small>同步代码结束</small>)<br/>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);