import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as c,c as i,b as n,d as p,a,e as s}from"./app.285b12f0.js";var l="/notes/assets/jsInterview/jsInterviewQuestion/1657850317079.jpg";const u={},r=a(`<h1 id="\u7B2C24\u9898-async\u3001await-\u5B9E\u73B0\u539F\u7406" tabindex="-1"><a class="header-anchor" href="#\u7B2C24\u9898-async\u3001await-\u5B9E\u73B0\u539F\u7406" aria-hidden="true">#</a> \u7B2C24\u9898\uFF1Aasync\u3001await \u5B9E\u73B0\u539F\u7406</h1><h2 id="javascript-\u5F02\u6B65\u7F16\u7A0B\u56DE\u987E" tabindex="-1"><a class="header-anchor" href="#javascript-\u5F02\u6B65\u7F16\u7A0B\u56DE\u987E" aria-hidden="true">#</a> JavaScript \u5F02\u6B65\u7F16\u7A0B\u56DE\u987E</h2><p>\u7531\u4E8E JavaScript \u662F\u5355\u7EBF\u7A0B\u6267\u884C\u6A21\u578B\uFF0C\u56E0\u6B64\u5FC5\u987B\u652F\u6301\u5F02\u6B65\u7F16\u7A0B\u624D\u80FD\u63D0\u9AD8\u8FD0\u884C\u6548\u7387\u3002\u5F02\u6B65\u7F16\u7A0B\u7684\u8BED\u6CD5\u76EE\u6807\u662F\u8BA9\u5F02\u6B65\u8FC7\u7A0B\u5199\u8D77\u6765\u50CF\u540C\u6B65\u8FC7\u7A0B\u3002</p><h3 id="_1-\u56DE\u8C03\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#_1-\u56DE\u8C03\u51FD\u6570" aria-hidden="true">#</a> 1. \u56DE\u8C03\u51FD\u6570</h3><p>\u56DE\u8C03\u51FD\u6570\uFF0C\u5C31\u662F\u628A\u4EFB\u52A1\u7684\u7B2C\u4E8C\u6BB5\u5355\u72EC\u5199\u5728\u4E00\u4E2A\u51FD\u6570\u91CC\u9762\uFF0C\u7B49\u5230\u91CD\u65B0\u6267\u884C\u8FD9\u4E2A\u4EFB\u52A1\u7684\u65F6\u5019\uFF0C\u5C31\u76F4\u63A5\u8C03\u7528\u8FD9\u4E2A\u51FD\u6570\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u56DE\u8C03\u51FD\u6570\u6700\u5927\u7684\u95EE\u9898\u662F\u5BB9\u6613\u5F62\u6210\u56DE\u8C03\u5730\u72F1\uFF0C\u5373\u591A\u4E2A\u56DE\u8C03\u51FD\u6570\u5D4C\u5957\uFF0C\u964D\u4F4E\u4EE3\u7801\u53EF\u8BFB\u6027\uFF0C\u589E\u52A0\u903B\u8F91\u7684\u590D\u6742\u6027\uFF0C\u5BB9\u6613\u51FA\u9519\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileA<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileB<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-promise" tabindex="-1"><a class="header-anchor" href="#_2-promise" aria-hidden="true">#</a> 2. Promise</h3><p>\u4E3A\u89E3\u51B3\u56DE\u8C03\u51FD\u6570\u7684\u4E0D\u8DB3\uFF0C\u793E\u533A\u521B\u9020\u51FA <code>Promise</code>\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">readFileWithPromise</span> <span class="token operator">=</span> <span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/profile&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7B80\u5355\u7684 <code>Promise</code> \u5B9E\u73B0\uFF0C\u7AA5\u63A2\u4E0B\u672C\u8D28</p><p><code>Promise</code> \u5B9E\u9645\u4E0A\u662F\u5229\u7528\u7F16\u7A0B\u6280\u5DE7\u5C06\u56DE\u8C03\u51FD\u6570\u7684\u6A2A\u5411\u52A0\u8F7D\uFF0C\u6539\u6210\u7EB5\u5411\u52A0\u8F7D\uFF0C\u8FBE\u5230\u94FE\u5F0F\u8C03\u7528\u7684\u6548\u679C\uFF0C\u907F\u514D\u56DE\u8C03\u5730\u72F1\u3002\u6700\u5927\u95EE\u9898\u662F\u4EE3\u7801\u5197\u4F59\uFF0C\u539F\u6765\u7684\u4EFB\u52A1\u88AB <code>Promise</code> \u5305\u88C5\u4E86\u4E00\u4E0B\uFF0C\u4E0D\u7BA1\u4EC0\u4E48\u64CD\u4F5C\uFF0C\u4E00\u773C\u770B\u53BB\u90FD\u662F\u4E00\u5806 then\uFF0C\u539F\u6765\u7684\u8BED\u4E49\u53D8\u5F97\u5F88\u4E0D\u6E05\u695A\u3002</p><h3 id="_3-async\u3001await" tabindex="-1"><a class="header-anchor" href="#_3-async\u3001await" aria-hidden="true">#</a> 3. async\u3001await</h3><p>\u4E3A\u4E86\u89E3\u51B3 <code>Promise</code> \u7684\u95EE\u9898\uFF0C<code>async</code>\u3001<code>await</code> \u5728 ES7 \u4E2D\u88AB\u63D0\u4E86\u51FA\u6765\uFF0C\u662F\u76EE\u524D\u4E3A\u6B62\u6700\u597D\u7684\u89E3\u51B3\u65B9\u6848</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>    
    <span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/profile&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>async</code>\u3001<code>await</code> \u51FD\u6570\u5199\u8D77\u6765\u8DDF\u540C\u6B65\u51FD\u6570\u4E00\u6837\uFF0C\u6761\u4EF6\u662F\u9700\u8981\u63A5\u6536 <code>Promise</code> \u6216\u539F\u59CB\u7C7B\u578B\u7684\u503C\u3002\u5F02\u6B65\u7F16\u7A0B\u7684\u6700\u7EC8\u76EE\u6807\u662F\u8F6C\u6362\u6210\u4EBA\u7C7B\u6700\u5BB9\u6613\u7406\u89E3\u7684\u5F62\u5F0F\u3002</p><h2 id="async\u3001await" tabindex="-1"><a class="header-anchor" href="#async\u3001await" aria-hidden="true">#</a> async\u3001await</h2><p>\u5206\u6790 <code>async</code>\u3001<code>await</code> \u5B9E\u73B0\u539F\u7406\u4E4B\u524D\uFF0C\u5148\u4ECB\u7ECD\u4E0B\u9884\u5907\u77E5\u8BC6</p><h3 id="_1-generator" tabindex="-1"><a class="header-anchor" href="#_1-generator" aria-hidden="true">#</a> 1. generator</h3><p><code>generator</code> \u51FD\u6570\u662F\u534F\u7A0B\u5728 <code>ES6</code> \u7684\u5B9E\u73B0\u3002\u534F\u7A0B\u7B80\u5355\u6765\u8BF4\u5C31\u662F\u591A\u4E2A\u7EBF\u7A0B\u4E92\u76F8\u534F\u4F5C\uFF0C\u5B8C\u6210\u5F02\u6B65\u4EFB\u52A1\u3002</p><p><img src="`+l+`" alt="demo"></p><p>\u6574\u4E2A <code>generator</code> \u51FD\u6570\u5C31\u662F\u4E00\u4E2A\u5C01\u88C5\u7684\u5F02\u6B65\u4EFB\u52A1\uFF0C\u5F02\u6B65\u64CD\u4F5C\u9700\u8981\u6682\u505C\u7684\u5730\u65B9\uFF0C\u90FD\u7528 <code>yield</code> \u8BED\u53E5\u6CE8\u660E\u3002generator \u51FD\u6570\u7684\u6267\u884C\u65B9\u6CD5\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token keyword">yield</span> x <span class="token operator">*</span> <span class="token number">2</span>
  <span class="token keyword">return</span> y
<span class="token punctuation">}</span>

<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// start { value: 2, done: false }</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">// { value: 4, done: true }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),k=n("code",null,"gen()",-1),d=s(" \u4E0D\u4F1A\u7ACB\u5373\u6267\u884C\uFF0C\u800C\u662F\u4E00\u4E0A\u6765\u5C31\u6682\u505C\uFF0C\u8FD4\u56DE\u4E00\u4E2A "),v=n("code",null,"Iterator",-1),m=s(" \u5BF9\u8C61\uFF08\u5177\u4F53\u53EF\u4EE5\u53C2\u8003 "),b={href:"https://github.com/wangfupeng1988/js-async-tutorial/blob/master/part4-generator/02-iterator.md",target:"_blank",rel:"noopener noreferrer"},f=s("Iterator\u904D\u5386\u5668"),g=s(" \uFF09"),h=a("<li><p>\u6BCF\u6B21 <code>g.next()</code> \u90FD\u4F1A\u6253\u7834\u6682\u505C\u72B6\u6001\u53BB\u6267\u884C\uFF0C\u76F4\u5230\u9047\u5230\u4E0B\u4E00\u4E2A <code>yield</code> \u6216\u8005 <code>return</code></p></li><li><p>\u9047\u5230 <code>yield</code> \u65F6\uFF0C\u4F1A\u6267\u884C <code>yield</code> \u540E\u9762\u7684\u8868\u8FBE\u5F0F\uFF0C\u5E76\u8FD4\u56DE\u6267\u884C\u4E4B\u540E\u7684\u503C\uFF0C\u7136\u540E\u518D\u6B21\u8FDB\u5165\u6682\u505C\u72B6\u6001\uFF0C\u6B64\u65F6 <code>done: false</code> \u3002</p></li><li><p><code>next</code> \u51FD\u6570\u53EF\u4EE5\u63A5\u53D7\u53C2\u6570\uFF0C\u4F5C\u4E3A\u4E0A\u4E2A\u9636\u6BB5\u5F02\u6B65\u4EFB\u52A1\u7684\u8FD4\u56DE\u7ED3\u679C\uFF0C\u88AB\u51FD\u6570\u4F53\u5185\u7684\u53D8\u91CF\u63A5\u6536</p></li><li><p>\u9047\u5230 <code>return</code> \u65F6\uFF0C\u4F1A\u8FD4\u56DE\u503C\uFF0C\u6267\u884C\u7ED3\u675F\uFF0C\u5373 <code>done: true</code></p></li><li><p>\u6BCF\u6B21 <code>g.next()</code> \u7684\u8FD4\u56DE\u503C\u6C38\u8FDC\u90FD\u662F <code>{value: ... , done: ...}</code> \u7684\u5F62\u5F0F</p></li>",5),y=a(`<h3 id="_2-thunk\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#_2-thunk\u51FD\u6570" aria-hidden="true">#</a> 2. thunk\u51FD\u6570</h3><p>JavaScript \u4E2D\u7684 <code>thunk</code> \u51FD\u6570\uFF08\u8BD1\u4E3A\u8F6C\u6362\u7A0B\u5E8F\uFF09\u7B80\u5355\u6765\u8BF4\u5C31\u662F\u628A\u5E26\u6709\u56DE\u8C03\u51FD\u6570\u7684\u591A\u53C2\u6570\u51FD\u6570\u8F6C\u6362\u6210\u53EA\u63A5\u6536\u56DE\u8C03\u51FD\u6570\u7684\u5355\u53C2\u6570\u7248\u672C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">thunkify</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">callback</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
<span class="token keyword">const</span> thunk <span class="token operator">=</span> <span class="token function">thunkify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span>
<span class="token keyword">const</span> readFileThunk <span class="token operator">=</span> <span class="token function">thunk</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
<span class="token function">readFileThunk</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5355\u7EAF\u7684 <code>thunk</code> \u51FD\u6570\u5E76\u6CA1\u6709\u5F88\u5927\u7684\u7528\u5904\uFF0C \u5927\u725B\u4EEC\u60F3\u5230\u4E86\u548C <code>generator</code> \u7ED3\u5408\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">readFileThunkWithGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> content1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFileThunk</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content1<span class="token punctuation">)</span>
    <span class="token keyword">const</span> content2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFileThunk</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/profile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;done&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;fail&#39;</span>
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>

<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">readFileThunkWithGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span>value
  <span class="token punctuation">}</span>
  g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>thunk</code> \u51FD\u6570\u7684\u771F\u6B63\u4F5C\u7528\u662F\u7EDF\u4E00\u591A\u53C2\u6570\u51FD\u6570\u7684\u8C03\u7528\u65B9\u5F0F\uFF0C\u5728 <code>next</code> \u8C03\u7528\u65F6\u628A\u63A7\u5236\u6743\u4EA4\u8FD8\u7ED9 <code>generator</code>\uFF0C\u4F7F <code>generator</code> \u51FD\u6570\u53EF\u4EE5\u4F7F\u7528\u9012\u5F52\u65B9\u5F0F\u81EA\u542F\u52A8\u6D41\u7A0B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token parameter">generator</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> rest <span class="token operator">:</span> rest<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    result<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">run</span><span class="token punctuation">(</span>readFileThunkWithGen<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6709\u4E86\u81EA\u542F\u52A8\u7684\u52A0\u6301\u4E4B\u540E\uFF0C<code>generator</code> \u51FD\u6570\u5185\u5C31\u53EF\u4EE5\u5199&quot;\u540C\u6B65&quot;\u7684\u4EE3\u7801\u4E86\u3002<code>generator</code> \u51FD\u6570\u4E5F\u53EF\u4EE5\u4E0E <code>Promise</code> \u7ED3\u5408\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">readFileWithGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>    
    <span class="token keyword">const</span> content1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content1<span class="token punctuation">)</span>
    <span class="token keyword">const</span> content2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/profile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;done&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;fail&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token parameter">generator</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      result<span class="token punctuation">.</span>value
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
          next<span class="token punctuation">,</span>
          <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span>readFileWithGen<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>generator</code> \u53EF\u4EE5\u6682\u505C\u6267\u884C\uFF0C\u5F88\u5BB9\u6613\u8BA9\u5B83\u548C\u5F02\u6B65\u64CD\u4F5C\u4EA7\u751F\u8054\u7CFB\uFF0C\u56E0\u4E3A\u6211\u4EEC\u5728\u5904\u7406\u5F02\u6B65\u64CD\u4F5C\u65F6\uFF0C\u5728\u7B49\u5F85\u7684\u65F6\u5019\u53EF\u4EE5\u6682\u505C\u5F53\u524D\u4EFB\u52A1\uFF0C\u628A\u7A0B\u5E8F\u63A7\u5236\u6743\u4EA4\u8FD8\u7ED9\u5176\u4ED6\u7A0B\u5E8F\uFF0C\u5F53\u5F02\u6B65\u4EFB\u52A1\u6709\u8FD4\u56DE\u65F6\uFF0C\u5728\u56DE\u8C03\u4E2D\u518D\u628A\u63A7\u5236\u6743\u4EA4\u8FD8\u7ED9\u4E4B\u524D\u7684\u4EFB\u52A1\u3002<code>generator</code> \u5B9E\u9645\u4E0A\u5E76\u6CA1\u6709\u6539\u53D8 JavaScript \u5355\u7EBF\u7A0B\u3001\u4F7F\u7528\u56DE\u8C03\u5904\u7406\u5F02\u6B65\u4EFB\u52A1\u7684\u672C\u8D28\u3002</p><h3 id="_3-co-\u51FD\u6570\u5E93" tabindex="-1"><a class="header-anchor" href="#_3-co-\u51FD\u6570\u5E93" aria-hidden="true">#</a> 3. co \u51FD\u6570\u5E93</h3>`,11),w=s("\u6BCF\u6B21\u6267\u884C "),_=n("code",null,"generator",-1),x=s(" \u51FD\u6570\u65F6\u81EA\u5DF1\u5199\u542F\u52A8\u5668\u6BD4\u8F83\u9EBB\u70E6\u3002 "),j={href:"https://github.com/tj/co",target:"_blank",rel:"noopener noreferrer"},F=s("co\u51FD\u6570\u5E93"),P=s(" \u662F\u4E00\u4E2A "),W=n("code",null,"generator",-1),S=s(" \u51FD\u6570\u7684\u81EA\u542F\u52A8\u6267\u884C\u5668\uFF0C\u4F7F\u7528\u6761\u4EF6\u662F "),T=n("code",null,"generator",-1),q=s(" \u51FD\u6570\u7684 "),I=n("code",null,"yield",-1),E=s(" \u547D\u4EE4\u540E\u9762\uFF0C\u53EA\u80FD\u662F "),G=n("code",null,"thunk",-1),J=s(" \u51FD\u6570\u6216 "),B=n("code",null,"Promise",-1),N=s(" \u5BF9\u8C61\uFF0Cco \u51FD\u6570\u6267\u884C\u5B8C\u8FD4\u56DE\u4E00\u4E2A "),V=n("code",null,"Promise",-1),L=s(" \u5BF9\u8C61\u3002"),R=a(`<p><code>co</code> \u51FD\u6570\u5E93\u7684\u6E90\u7801\u5B9E\u73B0\u5176\u5B9E\u5C31\u662F\u628A\u4E0A\u9762\u4E24\u79CD\u60C5\u51B5\u505A\u4E86\u7EFC\u5408:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u505A\u4E86\u7B80\u5316\uFF0C\u4E0E\u6E90\u7801\u57FA\u672C\u4E00\u81F4</span>
<span class="token keyword">const</span> <span class="token function-variable function">co</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">generator<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gen <span class="token operator">||</span> <span class="token keyword">typeof</span> gen<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> 
    
    <span class="token keyword">const</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">=</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> ret
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">next</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>    

    <span class="token keyword">const</span> <span class="token function-variable function">onRejected</span> <span class="token operator">=</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> ret
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">next</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">toPromise</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">toPromise</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;function&#39;</span> <span class="token operator">==</span> <span class="token keyword">typeof</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> rest <span class="token operator">:</span> rest<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-\u7406\u89E3-async\u3001await" tabindex="-1"><a class="header-anchor" href="#_4-\u7406\u89E3-async\u3001await" aria-hidden="true">#</a> 4. \u7406\u89E3 async\u3001await</h3><p>\u4E00\u53E5\u8BDD\uFF0C<code>async</code>\u3001<code>await</code> \u662F <code>co</code> \u5E93\u7684\u5B98\u65B9\u5B9E\u73B0\u3002\u4E5F\u53EF\u4EE5\u770B\u4F5C\u81EA\u5E26\u542F\u52A8\u5668\u7684 <code>generator</code> \u51FD\u6570\u7684\u8BED\u6CD5\u7CD6\u3002\u4E0D\u540C\u7684\u662F\uFF0C<code>async</code>\u3001<code>await</code> \u53EA\u652F\u6301 <code>Promise</code> \u548C\u539F\u59CB\u7C7B\u578B\u7684\u503C\uFF0C\u4E0D\u652F\u6301 <code>thunk</code> \u51FD\u6570\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// generator with co</span>
<span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>    
    <span class="token keyword">const</span> content1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content1<span class="token punctuation">)</span>
    <span class="token keyword">const</span> content2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/profile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;done&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;fail&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// async await</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> content1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content1<span class="token punctuation">)</span>
    <span class="token keyword">const</span> content2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFileWithPromise</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/profile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;done&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p>\u4E0D\u8BBA\u4EE5\u4E0A\u54EA\u79CD\u65B9\u5F0F\uFF0C\u90FD\u6CA1\u6709\u6539\u53D8 <code>JavaScript</code> \u5355\u7EBF\u7A0B\u3001\u4F7F\u7528\u56DE\u8C03\u5904\u7406\u5F02\u6B65\u4EFB\u52A1\u7684\u672C\u8D28\u3002\u4EBA\u7C7B\u603B\u662F\u8FFD\u6C42\u6700\u7B80\u5355\u6613\u4E8E\u7406\u89E3\u7684\u7F16\u7A0B\u65B9\u5F0F\u3002</p>`,7);function A(C,Q){const t=o("ExternalLinkIcon");return c(),i("div",null,[r,n("ul",null,[n("li",null,[n("p",null,[k,d,v,m,n("a",b,[f,p(t)]),g])]),h]),y,n("p",null,[w,_,x,n("a",j,[F,p(t)]),P,W,S,T,q,I,E,G,J,B,N,V,L]),R])}var H=e(u,[["render",A],["__file","24.html.vue"]]);export{H as default};
